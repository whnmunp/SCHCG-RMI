/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */




import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.Registry;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Formulario principal para el tipo de usuario Digitador
 * @author Wilson Neira Mija
 * @author Carlos Nole Machaca
 * @version 1.5.2
 */
public class frmPrincipal extends javax.swing.JFrame {
    /**
     * Tamaño de columnas de la tabla
     */
    int tamColum[]={8,200,8,8};
    /**
     * Objeto PacienteControl
     */
    PacienteControl pac;
    /**
     * Objeto CarpetaFamiliarControl
     */
    CarpetaFamiliarControl cfc;
    /**
     * Objeto HistoriaClinicaControl
     */
    HistoriaClinicaControl hcc;
    /**
     * Objeto PropiedadesTablas
     */
    PropiedadesTablas pt;
    /**
     * Objeto CarpetaFamiliar
     */
    CarpetaFamiliar carf;
    /**
     * Objeto HistoriaClinica
     */
    HistoriaClinica Histc;
    /**
     * Objeto Paciente
     */
    Paciente paci;
    /**
     * Objeto Registry
     */
    Registry registry;
    
    /**
     * Crea la interfaz para el usuario tipo Administrador o digitador
     */
    public frmPrincipal(Registry registry) throws SQLException {
        Apariencia();
        initComponents();
        this.registry=registry;
        Configuraciones();
        pac=new PacienteControl();
        cfc=new CarpetaFamiliarControl();
        hcc=new HistoriaClinicaControl();
        pt=new PropiedadesTablas();
        carf=new CarpetaFamiliar();
        Histc=new HistoriaClinica();
        paci=new Paciente();
        EscribeCantidades();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpcontenedor = new javax.swing.JPanel();
        jpFiltros = new javax.swing.JPanel();
        lbDNI = new javax.swing.JLabel();
        txtDNI = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jpResultados = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtPacientes = new javax.swing.JTable();
        lbTituloSistema = new javax.swing.JLabel();
        btnNuevaCarpeta = new javax.swing.JButton();
        btnActualizarCarpeta = new javax.swing.JButton();
        lbUsuario = new javax.swing.JLabel();
        lbNombre = new javax.swing.JLabel();
        lbApellidos = new javax.swing.JLabel();
        jtbIconos = new javax.swing.JToolBar();
        btnbNuevaCarpeta = new javax.swing.JButton();
        btnbActualizarCarpeta = new javax.swing.JButton();
        jmbMenuPrincipal = new javax.swing.JMenuBar();
        jmArchivo = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jmOperaciones = new javax.swing.JMenu();
        jmiRegistrarCarpeta = new javax.swing.JMenuItem();
        jmiActualizarCF = new javax.swing.JMenuItem();
        jmiEliminarCF = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jmiActualizarCarpeta = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("DIGITADOR-SISTEMA DE CONSULTA DE HISTORIAS CLINICAS");
        setAlwaysOnTop(true);
        setMinimumSize(new java.awt.Dimension(1288, 650));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jpcontenedor.setName(""); // NOI18N
        jpcontenedor.setPreferredSize(new java.awt.Dimension(480, 329));

        jpFiltros.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones de Busqueda"));
        jpFiltros.setOpaque(false);

        lbDNI.setText("DNI/");

        txtDNI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDNIActionPerformed(evt);
            }
        });
        txtDNI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDNIKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDNIKeyTyped(evt);
            }
        });

        jLabel6.setText("CARNET EXT.:");

        javax.swing.GroupLayout jpFiltrosLayout = new javax.swing.GroupLayout(jpFiltros);
        jpFiltros.setLayout(jpFiltrosLayout);
        jpFiltrosLayout.setHorizontalGroup(
            jpFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFiltrosLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jpFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbDNI)
                    .addComponent(jLabel6))
                .addGap(11, 11, 11)
                .addComponent(txtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jpFiltrosLayout.setVerticalGroup(
            jpFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFiltrosLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(lbDNI)
                .addGap(6, 6, 6)
                .addComponent(jLabel6))
            .addGroup(jpFiltrosLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(txtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jpResultados.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jpResultados.setOpaque(false);

        jtPacientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DNI", "APELLIDOS Y NOMBRES", "N° CARPETA", "HC NUEVA", "HC ANTIGUA"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtPacientes.setToolTipText("");
        jtPacientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtPacientesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtPacientes);

        javax.swing.GroupLayout jpResultadosLayout = new javax.swing.GroupLayout(jpResultados);
        jpResultados.setLayout(jpResultadosLayout);
        jpResultadosLayout.setHorizontalGroup(
            jpResultadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpResultadosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1056, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpResultadosLayout.setVerticalGroup(
            jpResultadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpResultadosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lbTituloSistema.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbTituloSistema.setText("SISTEMA DE CONSULTAS DE HISTORIAS CLINICAS");

        btnNuevaCarpeta.setBackground(new java.awt.Color(255, 255, 153));
        btnNuevaCarpeta.setForeground(new java.awt.Color(0, 0, 255));
        btnNuevaCarpeta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/add carp - boton.png"))); // NOI18N
        btnNuevaCarpeta.setText("Nueva Carpeta");
        btnNuevaCarpeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevaCarpetaActionPerformed(evt);
            }
        });

        btnActualizarCarpeta.setBackground(new java.awt.Color(255, 255, 153));
        btnActualizarCarpeta.setForeground(new java.awt.Color(0, 0, 255));
        btnActualizarCarpeta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/update - boton.png"))); // NOI18N
        btnActualizarCarpeta.setText("Actualizar Carpeta");
        btnActualizarCarpeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarCarpetaActionPerformed(evt);
            }
        });

        lbUsuario.setText("USUARIO:");

        javax.swing.GroupLayout jpcontenedorLayout = new javax.swing.GroupLayout(jpcontenedor);
        jpcontenedor.setLayout(jpcontenedorLayout);
        jpcontenedorLayout.setHorizontalGroup(
            jpcontenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpcontenedorLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lbUsuario))
            .addGroup(jpcontenedorLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lbNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(200, 200, 200)
                .addComponent(lbTituloSistema))
            .addGroup(jpcontenedorLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lbApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jpFiltros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jpcontenedorLayout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(jpResultados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jpcontenedorLayout.createSequentialGroup()
                .addGap(410, 410, 410)
                .addComponent(btnNuevaCarpeta, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(190, 190, 190)
                .addComponent(btnActualizarCarpeta, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jpcontenedorLayout.setVerticalGroup(
            jpcontenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpcontenedorLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lbUsuario)
                .addGap(6, 6, 6)
                .addGroup(jpcontenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbTituloSistema))
                .addGap(8, 8, 8)
                .addGroup(jpcontenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpcontenedorLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jpFiltros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20)
                .addComponent(jpResultados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jpcontenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNuevaCarpeta)
                    .addComponent(btnActualizarCarpeta)))
        );

        getContentPane().add(jpcontenedor, java.awt.BorderLayout.CENTER);

        jtbIconos.setRollover(true);
        jtbIconos.setOpaque(false);

        btnbNuevaCarpeta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/add carp - boton.png"))); // NOI18N
        btnbNuevaCarpeta.setToolTipText("Registrar Carpeta Familiar");
        btnbNuevaCarpeta.setFocusable(false);
        btnbNuevaCarpeta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnbNuevaCarpeta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnbNuevaCarpeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbNuevaCarpetaActionPerformed(evt);
            }
        });
        jtbIconos.add(btnbNuevaCarpeta);

        btnbActualizarCarpeta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/update - boton.png"))); // NOI18N
        btnbActualizarCarpeta.setToolTipText("Actualizar Carpeta Familiar");
        btnbActualizarCarpeta.setFocusable(false);
        btnbActualizarCarpeta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnbActualizarCarpeta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnbActualizarCarpeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbActualizarCarpetaActionPerformed(evt);
            }
        });
        jtbIconos.add(btnbActualizarCarpeta);

        getContentPane().add(jtbIconos, java.awt.BorderLayout.PAGE_START);

        jmbMenuPrincipal.setOpaque(false);

        jmArchivo.setText("Archivo");

        jMenuItem1.setText("Backup BD");
        jmArchivo.add(jMenuItem1);

        jMenuItem2.setText("Restaurar BD");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jmArchivo.add(jMenuItem2);

        jmbMenuPrincipal.add(jmArchivo);

        jmOperaciones.setText("Operaciones");

        jmiRegistrarCarpeta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/add carp.png"))); // NOI18N
        jmiRegistrarCarpeta.setText("Registrar Carpeta Familiar");
        jmiRegistrarCarpeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiRegistrarCarpetaActionPerformed(evt);
            }
        });
        jmOperaciones.add(jmiRegistrarCarpeta);

        jmiActualizarCF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/update folder.png"))); // NOI18N
        jmiActualizarCF.setText("Actualizar Carpeta Familiar");
        jmiActualizarCF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiActualizarCFActionPerformed(evt);
            }
        });
        jmOperaciones.add(jmiActualizarCF);

        jmiEliminarCF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/delete folder.png"))); // NOI18N
        jmiEliminarCF.setText("Eliminar Carpeta Familiar");
        jmiEliminarCF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiEliminarCFActionPerformed(evt);
            }
        });
        jmOperaciones.add(jmiEliminarCF);
        jmOperaciones.add(jSeparator2);

        jmiActualizarCarpeta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/update.png"))); // NOI18N
        jmiActualizarCarpeta.setText("Actualizar Datos Carpeta Familiar");
        jmiActualizarCarpeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiActualizarCarpetaActionPerformed(evt);
            }
        });
        jmOperaciones.add(jmiActualizarCarpeta);
        jmOperaciones.add(jSeparator1);

        jmbMenuPrincipal.add(jmOperaciones);

        setJMenuBar(jmbMenuPrincipal);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Muestra la interfaz para realizar un registro
     * de carpeta familiar desde la barra de menu.
     * @param evt ActionEvent
     */
    private void jmiRegistrarCarpetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiRegistrarCarpetaActionPerformed
        try {
            AbriJdRegistrarCarpetaFamiliar();
        } catch (SQLException ex) {
            Logger.getLogger(frmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jmiRegistrarCarpetaActionPerformed

    /**
     * Muestra la interfaz para realizar una actualizacion
     * de datos de la carpeta familiar desde la barra de menu
     * @param evt ActionEvent
     */
    private void jmiActualizarCarpetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiActualizarCarpetaActionPerformed
        ActualizarGeneral();
    }//GEN-LAST:event_jmiActualizarCarpetaActionPerformed

    /**
     * Valida el tipo de documento
     * @param evt 
     */
    private void txtDNIKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDNIKeyTyped
        pac.ValidarDNIYCE(txtDNI, evt);
    }//GEN-LAST:event_txtDNIKeyTyped

    /**
     * Muestra la interfaz para realizar un registro
     * de carpeta familiar desde la barra de Herramientas.
     * @param evt ActionEvent
     */
    private void btnbNuevaCarpetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbNuevaCarpetaActionPerformed
        try {
            AbriJdRegistrarCarpetaFamiliar();
        } catch (SQLException ex) {
            Logger.getLogger(frmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnbNuevaCarpetaActionPerformed

    /**
     * Muestra la interfaz para realizar un registro
     * de carpeta familiar desde un boton.
     * @param evt ActionEvent
     */
    private void btnNuevaCarpetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevaCarpetaActionPerformed
        try {
            AbriJdRegistrarCarpetaFamiliar();
        } catch (SQLException ex) {
            Logger.getLogger(frmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnNuevaCarpetaActionPerformed

    /**
     * Muestra la interfaz para realizar una actualizacion
     * de datos de la carpeta familiar desde la barra de herramientas
     * @param evt ActionEvent
     */
    private void btnbActualizarCarpetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbActualizarCarpetaActionPerformed
        ActualizarGeneral();
    }//GEN-LAST:event_btnbActualizarCarpetaActionPerformed

    /**
     * Muestra la interfaz para realizar una actualizacion
     * de datos de la carpeta familiar desde un boton
     * @param evt ActionEvent
     */
    private void btnActualizarCarpetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarCarpetaActionPerformed
        ActualizarGeneral();
    }//GEN-LAST:event_btnActualizarCarpetaActionPerformed

    private void txtDNIKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDNIKeyReleased
        try {                                   
            String DNI;
            InterfazSCHCG rp = (InterfazSCHCG) registry.lookup("conex");
            DNI=txtDNI.getText();
            //ConsultarPacientes(DNI,0);
            String query="SELECT p.dni, p.\"ApPaterno\", p.\"ApMaterno\", p.\"Nombres\",hc.\"codHistoria\", hc.\"codCarpeta\",hc.\"histAntigua\"\n" +
                    "  FROM \"Paciente\" as p inner join \"HistoriaClinica\" hc on hc.id=p.id where p.dni like '"+DNI+"%';";
            String res;
            res = rp.consultarPorDNI(query);
            JOptionPane.showMessageDialog(null, res);
        } catch (RemoteException ex) {
            Logger.getLogger(frmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(frmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
          
    }//GEN-LAST:event_txtDNIKeyReleased

   
    /**
     * Se habilita la funcion de aádir historia
     * @param evt 
     */
    private void jtPacientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtPacientesMouseClicked
//       HabilitarAñadirHistoria();
    }//GEN-LAST:event_jtPacientesMouseClicked

    /**
     * Cierra la ventana sin terminar el programa
     * @param evt 
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
//         CerraSesion();
    }//GEN-LAST:event_formWindowClosing

    /**
     * Muestra la interfaz para actualizar número de carpeta familiar
     * @param evt 
     */
    private void jmiActualizarCFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiActualizarCFActionPerformed
        new jdActualizarEliminarCarpeta(this,true,1).setVisible(true); 
    }//GEN-LAST:event_jmiActualizarCFActionPerformed

    /**
     * Muestra la interfaz para eliminar carpeta familiar
     * @param evt 
     */
    private void jmiEliminarCFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiEliminarCFActionPerformed
        new jdActualizarEliminarCarpeta(this,true,2).setVisible(true);      
    }//GEN-LAST:event_jmiEliminarCFActionPerformed

    private void txtDNIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDNIActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDNIActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * Recoge el contenido de los campos
     * correspondientes a la estructura de
     * un nombre
     */
//    public void Nombres(){
//        String appat,apmat,nombre;
//        appat=txtApePar.getText();
//        apmat=txtApeMat.getText();
//        nombre=txtNombres.getText();
//        ConsultarPacientes(appat,apmat,nombre);
//    }
    
    /**
     * Consulta a la base de datos y llena la tabla con los 
     * datos que sean devueltos ante cualquiera de los filtros
     * como: DNI/CARNET EXT, N° CARPETA, HC NUEVA y HC ANTIGUA
     * @param Dato
     * @param Limpiar 
     */
    public void ConsultarPacientes(String Dato,int Limpiar){
        Paciente paciente;
        ArrayList<Paciente> pacientes = null;
        int i,tam;
        String query = null,query2=null;
        //try {
        tam=Dato.length();
        if(tam==0){
            pt.TablaPacientes1(jtPacientes);//TablaPacientes();
//            DeshabilitarAñadirHistoria();
        }
        else
        {
            pt.TablaPacientes1(jtPacientes);//TablaPacientes();
            paciente=new Paciente();
            switch(Limpiar){
            case 0:
//                limpiarSiDNI();
                //query="SELECT  p.dni,p.\"ApPaterno\", p.\"ApMaterno\", p.\"Nombres\", hc.\"codCarpeta\",hc.\"codHistoria\" FROM \"HistoriaClinica\" as hc inner join \"Paciente\" as p on hc.dni=p.dni  where hc.dni like '"+Dato+"%';";
                query="SELECT p.dni, p.\"ApPaterno\", p.\"ApMaterno\", p.\"Nombres\",hc.\"codHistoria\", hc.\"codCarpeta\",hc.\"histAntigua\"\n" +
                "  FROM \"Paciente\" as p inner join \"HistoriaClinica\" hc on hc.id=p.id where p.dni like '"+Dato+"%';";
                break;
            case 1:
                limpiarSiNumCarpeta();
                //query="SELECT  p.dni,p.\"ApPaterno\", p.\"ApMaterno\", p.\"Nombres\", hc.\"codCarpeta\",hc.\"codHistoria\" FROM \"HistoriaClinica\" as hc inner join \"Paciente\" as p on hc.dni=p.dni  where hc.\"codCarpeta\" like '"+Dato+"%';";
                query="SELECT p.dni, p.\"ApPaterno\", p.\"ApMaterno\", p.\"Nombres\",hc.\"codHistoria\", hc.\"codCarpeta\",hc.\"histAntigua\"\n" +
                "  FROM \"Paciente\" as p inner join \"HistoriaClinica\" hc on hc.id=p.id where hc.\"codCarpeta\"='"+Dato+"';";
                break;
            case 2:
                limpiarSiHistClinica();
                //query="SELECT  p.dni,p.\"ApPaterno\", p.\"ApMaterno\", p.\"Nombres\", hc.\"codCarpeta\",hc.\"codHistoria\" FROM \"HistoriaClinica\" as hc inner join \"Paciente\" as p on hc.dni=p.dni  where hc.\"codHistoria\" like '"+Dato+"%';";
                query="SELECT p.dni, p.\"ApPaterno\", p.\"ApMaterno\", p.\"Nombres\",hc.\"codHistoria\", hc.\"codCarpeta\",hc.\"histAntigua\"\n" +
                "  FROM \"Paciente\" as p inner join \"HistoriaClinica\" hc on hc.id=p.id where hc.\"codHistoria\" like '"+Dato+"%';";
                break;
             case 3:
                limpiarSiHistAnt();
                //query="SELECT  p.dni,p.\"ApPaterno\", p.\"ApMaterno\", p.\"Nombres\", hc.\"codCarpeta\",hc.\"codHistoria\" FROM \"HistoriaClinica\" as hc inner join \"Paciente\" as p on hc.dni=p.dni  where hc.\"codHistoria\" like '"+Dato+"%';";
                query="SELECT p.dni, p.\"ApPaterno\", p.\"ApMaterno\", p.\"Nombres\",hc.\"codHistoria\", hc.\"codCarpeta\",hc.\"histAntigua\"\n" +
                "  FROM \"Paciente\" as p inner join \"HistoriaClinica\" hc on hc.id=p.id where hc.\"histAntigua\" like '"+Dato+"%';";
                break;   
            }
            //pacientes=paciente.ConsultarPacientes(query,0);
//            pacientes=paciente.ConsultarPacientes(query,0);
//            if(pacientes!=null){
//                for(i=0;i<pacientes.size();i++){
//                    paciente=pacientes.get(i);
//                    Object fila[]={paciente.getDNI(),paciente.getApPat().trim()+" "+paciente.getAptMat().trim()+" "+paciente.getNombre().trim(),paciente.getCf().getCarpetaFamiliar(),paciente.getHc().getHc(),paciente.getHc().getCf()};
//                    ((DefaultTableModel)jtPacientes.getModel()).addRow(fila);
//                }
//            }
//        }
//        } catch (SQLException ex) {
//            Logger.getLogger(frmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }
    }     

    /**
     * Consulta a la base de datos y llena la tabla con
     * los datos que sean devueltos ante el nombre ingresado
     * @param appat
     * @param apmat
     * @param nombre 
     */
//    public void ConsultarPacientes(String appat,String apmat,String nombre){
//        Paciente paciente;
//        ArrayList<Paciente> pacientes = null;
//        int i;
//        try {
//        limpiarSiApeNombres();
//        if(appat.isEmpty()&& apmat.isEmpty() && nombre.isEmpty())
//            pt.TablaPacientes1(jtPacientes);//TablaPacientes();
//        else
//        {
//            pt.TablaPacientes1(jtPacientes);//TablaPacientes();
//            paciente=new Paciente();
//            pacientes=paciente.ConsultarPacientes(appat,apmat,nombre,0);
//            if(pacientes!=null){
//                for(i=0;i<pacientes.size();i++){
//                    paciente=pacientes.get(i);
//                    Object fila[]={paciente.getDNI(),paciente.getApPat().trim()+" "+paciente.getAptMat().trim()+" "+paciente.getNombre().trim(),paciente.getCf().getCarpetaFamiliar(),paciente.getHc().getHc(),paciente.getHc().getCf()};
//                    ((DefaultTableModel)jtPacientes.getModel()).addRow(fila);
//                }
//            }
//        }
//        } catch (SQLException ex) {
//            Logger.getLogger(frmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
//        }
//    }
    
    
    public void Configuraciones()
    {
        //setExtendedState(JFrame.MAXIMIZED_BOTH);
        jpcontenedor.setBorder(new ImagenMDI());
//        lbNombre.setText(em.getNombre());
//        lbApellidos.setText(em.getApellidos());
    }
    
    /**
     * Limpia todos los campos alrededor del
     * campo dni
     */
//    public void limpiarSiDNI(){
//        txtNumCarpeta.setText("");
//        txtHistClinica.setText("");
//        txtHcAntigua.setText("");
//        txtApePar.setText("");
//        txtApeMat.setText("");
//        txtNombres.setText("");
//    }
    
    /**
     * Limpia todos los campos alrededor del
     * campo numero de carpeta familiar
     */
    public void limpiarSiNumCarpeta(){
        txtDNI.setText("");
//        txtHistClinica.setText("");
//        txtHcAntigua.setText("");
//        txtApePar.setText("");
//        txtApeMat.setText("");
//        txtNombres.setText("");
    }
    
    /**
     * Limpia todos los campos alrededor del
     * campo historia nueva
     */
    public void limpiarSiHistClinica(){
//        txtNumCarpeta.setText("");
        txtDNI.setText("");
//        txtHcAntigua.setText("");
//        txtApePar.setText("");
//        txtApeMat.setText("");
//        txtNombres.setText("");
    }
    
    /**
     * Limpia todos los campos alrededor del
     * campo historia antigua
     */
    public void limpiarSiHistAnt(){
  //      txtNumCarpeta.setText("");
        txtDNI.setText("");
  //      txtApePar.setText("");
  //      txtApeMat.setText("");
  //      txtNombres.setText("");
  //      txtHistClinica.setText("");
    }
    
    /**
     * Limpia todos los campos alrededor de 
     * los campos correspondientes a la estructura de
     * un nombre completo
     */
    public void limpiarSiApeNombres(){
//        txtNumCarpeta.setText("");
//        txtHistClinica.setText("");
        txtDNI.setText("");
//        txtHcAntigua.setText("");
    }
    
    /**
     * Utilizado en todas las partes donde se desea
     * mostrar la interfaz Registrar carpeta familiar
     * @throws SQLException 
     */
    public void AbriJdRegistrarCarpetaFamiliar() throws SQLException{
        jdRegistrarCarpetaFamiliar jdrcf=new jdRegistrarCarpetaFamiliar(this,false,0);
        jdrcf.setVisible(true);
    }
    
    /**
     * Ayuda a mostrar la interfaz actualizar datos
     * de la carpeta familiar
     * @param codCarpeta numero de carpeta familiar
     * @param DeDonde desde que interfaz se a llamado
     * @throws SQLException 
     */
    public void AbriJdActualizarCarpetaFamiliar(String codCarpeta,int DeDonde) throws SQLException{
        jdActualizarCarpetaFamiliar jdacf=new jdActualizarCarpetaFamiliar(this,false);
        if(DeDonde==0)
            jdacf.CompletarDatos(codCarpeta,0);
        jdacf.setVisible(true);
    }
    
    /**
     * Se utiliza en todas las partes donde se 
     * abrira la interfaz añadir historia
     * @throws SQLException 
     */
//    public void AbriJdAñadirHistoriaClinica() throws SQLException{
//        int fila;
//        String codCarpeta;
//        try{
//            fila=jtPacientes.getSelectedRow();
//            if(fila!=-1){
//                codCarpeta=((DefaultTableModel)jtPacientes.getModel()).getValueAt(fila,2).toString();
//                jdAñadirHistoriaClinica jdahc=new jdAñadirHistoriaClinica(this,false,0);
//                jdahc.CompletarDatos(codCarpeta);
//                jdahc.setVisible(true);
//            }
//            else{
//                JOptionPane.showMessageDialog(null,"Debe Seleccionar una fila","VALIDADOR",JOptionPane.ERROR_MESSAGE);
//            }
//        }
//        catch(SQLException ex){
//             Logger.getLogger(frmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        
//    }
    
    
    /**
     * Se utiliza en todas las partes donde se abrira
     * la interfaz actualizar datos de carpeta familiar
     */
    public void ActualizarGeneral(){
        int fila;
        String codCarpeta;
        try{
            fila=jtPacientes.getSelectedRow();
            if(fila!=-1){
                codCarpeta=((DefaultTableModel)jtPacientes.getModel()).getValueAt(fila,2).toString();
                AbriJdActualizarCarpetaFamiliar(codCarpeta,0);
            }
            else{
                AbriJdActualizarCarpetaFamiliar("",1);
            }
        }
        catch(SQLException ex){
             Logger.getLogger(frmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Actualiza los indicadores para saber cuantas carpetas
     * familiares van registrandose o cuantos pacientes van }
     * registrandose
     * @throws SQLException 
     */
    public void EscribeCantidades() throws SQLException{
//        lbCantCarpetas.setText(String.valueOf(carf.CantidadCarpetas()));
//        lbCantHist.setText(String.valueOf(Histc.CantidadHistorias()));
//        lbCantPacientes.setText(String.valueOf(paci.CantidadPacientes()));
    }
    
    /**
     * Ayuda a la interfaz para que tenga
     * la apariencia de Nimbus
     */
    public void Apariencia(){
         try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Cierra la interfaz principal y muestra
     * nuevamente la interfaz de loguin
     */
//    public void CerraSesion(){
//        int resp;
//        resp=JOptionPane.showConfirmDialog(this,"¿Esta seguro que quiere Cerrar Sesión?","Pregunta",0);
//        if(resp==0){
//            loguin lo=new loguin();
//            lo.setVisible(true);
//            dispose();
//        }
//    }
    
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {        
//            public void run() {                
//                try {
//                    new frmPrincipal().setVisible(true);
//                } catch (SQLException ex) {
//                    Logger.getLogger(frmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizarCarpeta;
    private javax.swing.JButton btnNuevaCarpeta;
    private javax.swing.JButton btnbActualizarCarpeta;
    private javax.swing.JButton btnbNuevaCarpeta;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenu jmArchivo;
    private javax.swing.JMenu jmOperaciones;
    private javax.swing.JMenuBar jmbMenuPrincipal;
    private javax.swing.JMenuItem jmiActualizarCF;
    private javax.swing.JMenuItem jmiActualizarCarpeta;
    private javax.swing.JMenuItem jmiEliminarCF;
    private javax.swing.JMenuItem jmiRegistrarCarpeta;
    private javax.swing.JPanel jpFiltros;
    private javax.swing.JPanel jpResultados;
    private javax.swing.JPanel jpcontenedor;
    private javax.swing.JTable jtPacientes;
    private javax.swing.JToolBar jtbIconos;
    private javax.swing.JLabel lbApellidos;
    private javax.swing.JLabel lbDNI;
    private javax.swing.JLabel lbNombre;
    private javax.swing.JLabel lbTituloSistema;
    private javax.swing.JLabel lbUsuario;
    private javax.swing.JTextField txtDNI;
    // End of variables declaration//GEN-END:variables

}
