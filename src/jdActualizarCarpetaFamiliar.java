/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */




import java.awt.BorderLayout;
import java.awt.event.ItemEvent;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sourceforge.jdatepicker.impl.JDatePanelImpl;
import net.sourceforge.jdatepicker.impl.JDatePickerImpl;
import net.sourceforge.jdatepicker.impl.UtilDateModel;

/**
 * Interfaz para actualizar datos de la carpeta familiar
 * @author Carlos Nole Machaca
 * @version 1.5.2
 */
public class jdActualizarCarpetaFamiliar extends javax.swing.JDialog {
  /*  /**
     * Objeto de PropiedadesTablas
     */
    PropiedadesTablas pt;
    /**
     * Objeto PacuenteControl
     */
    PacienteControl pac;
    /**
     * Objeto CarpeFamiliarControl
     */
    CarpetaFamiliarControl cfc;
    /**
     * Objeto HistoriaClinicaControl
     */
    HistoriaClinicaControl hcc;
    /**
     * Objeto para la fecha
     */
    private JDatePickerImpl fa = new JDatePickerImpl(new JDatePanelImpl(new UtilDateModel(new Date())));    
    /**
     * controla la fila en la que esta el jefe de familia
     */
    int FilaJefe; 
    /**
     * indica que fila ha sido extraida de la tabla
     */
    int FilaExtraida; 
    /**
     * indica el codigo donde esta el jefe
     */
    int idJefe;
    /**
     * Objeto Conexion
     */
    Conexion con;
    /**
     * Obtiene la conexion
     */
    Connection conn;    
    /**
     * Objeto Paciente
     */
    private Paciente p;
    /**
     * Objeto CarpetaFamiliar
     */
    private CarpetaFamiliar cf;
    /**
     * Objeto HistoriaClinica
     */
    private HistoriaClinica hc;
    /**
     * Objeto Parentesco
     */
    private Parentesco pa;
    
    /**
     * Creates new form jdActualizarCarpetaFamiliar
     */
    public jdActualizarCarpetaFamiliar(java.awt.Frame parent, boolean modal) throws SQLException {
          super(parent, modal);
          initComponents();
//        Limpiar();
//        con=new Conexion();
//        conn=con.getConnection();       
//        Configuraciones();
//        LlenarCombo();
//        jpFecha.setLayout(new BorderLayout());
//        jpFecha.add(fa, BorderLayout.CENTER);    
//        setLocationRelativeTo(null);
//        fa.getJFormattedTextField().setText("");
//        pac=new PacienteControl();
//        cfc=new CarpetaFamiliarControl();
//        hcc=new HistoriaClinicaControl();
//        pt=new PropiedadesTablas();
//        FilaJefe=-1;                
   }
//
//    /**
//     * This method is called from within the constructor to initialize the form.
//     * WARNING: Do NOT modify this code. The content of this method is always
//     * regenerated by the Form Editor.
//     */
//    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpContenedor = new javax.swing.JPanel();
        jpDatosGenerales = new javax.swing.JPanel();
        txtDNI = new javax.swing.JTextField();
        lbApePat = new javax.swing.JLabel();
        txtApePar = new javax.swing.JTextField();
        lbApeMat = new javax.swing.JLabel();
        txtApeMat = new javax.swing.JTextField();
        lbNombres = new javax.swing.JLabel();
        txtNombres = new javax.swing.JTextField();
        lbFechaNacimiento = new javax.swing.JLabel();
        jpFecha = new javax.swing.JPanel();
        lbSexo = new javax.swing.JLabel();
        jcbSexo = new javax.swing.JComboBox();
        lbParentesco = new javax.swing.JLabel();
        jcbParentesco = new javax.swing.JComboBox();
        btnModificar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jcheckBoxJefeCarpeta = new javax.swing.JCheckBox();
        lbDireccion = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        lbDNI1 = new javax.swing.JLabel();
        jpHistoriasClinicas = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtHistoriasClinicas = new javax.swing.JTable();
        lbNCarpeta1 = new javax.swing.JLabel();
        txtCarpeta = new javax.swing.JTextField();
        lbGuion = new javax.swing.JLabel();
        txtHistoria = new javax.swing.JTextField();
        lbNCarpeta2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Actualizar Carpeta Familiar");

        jpContenedor.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jpDatosGenerales.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos Generales"));
        jpDatosGenerales.setOpaque(false);
        jpDatosGenerales.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtDNI.setEditable(false);
        txtDNI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDNIKeyTyped(evt);
            }
        });
        jpDatosGenerales.add(txtDNI, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 30, 100, -1));

        lbApePat.setText("Apellidos Paterno: ");
        jpDatosGenerales.add(lbApePat, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, -1, -1));

        txtApePar.setEditable(false);
        txtApePar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtApeParKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApeParKeyTyped(evt);
            }
        });
        jpDatosGenerales.add(txtApePar, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 70, 110, -1));

        lbApeMat.setText("Apellidos Materno:");
        jpDatosGenerales.add(lbApeMat, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 70, -1, -1));

        txtApeMat.setEditable(false);
        txtApeMat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtApeMatKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApeMatKeyTyped(evt);
            }
        });
        jpDatosGenerales.add(txtApeMat, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 70, 100, -1));

        lbNombres.setText("Nombres:");
        jpDatosGenerales.add(lbNombres, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 70, -1, -1));

        txtNombres.setEditable(false);
        txtNombres.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNombresKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombresKeyTyped(evt);
            }
        });
        jpDatosGenerales.add(txtNombres, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 70, 220, -1));

        lbFechaNacimiento.setText("Fecha Nacimiento:");
        jpDatosGenerales.add(lbFechaNacimiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, -1, -1));

        javax.swing.GroupLayout jpFechaLayout = new javax.swing.GroupLayout(jpFecha);
        jpFecha.setLayout(jpFechaLayout);
        jpFechaLayout.setHorizontalGroup(
            jpFechaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 190, Short.MAX_VALUE)
        );
        jpFechaLayout.setVerticalGroup(
            jpFechaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 34, Short.MAX_VALUE)
        );

        jpDatosGenerales.add(jpFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 110, 190, -1));

        lbSexo.setText("Sexo:");
        jpDatosGenerales.add(lbSexo, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 120, -1, -1));

        jcbSexo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MASCULINO", "FEMENINO" }));
        jcbSexo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbSexoItemStateChanged(evt);
            }
        });
        jpDatosGenerales.add(jcbSexo, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 120, 120, -1));

        lbParentesco.setText("Parentesco:");
        jpDatosGenerales.add(lbParentesco, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 120, -1, -1));

        jcbParentesco.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbParentescoItemStateChanged(evt);
            }
        });
        jpDatosGenerales.add(jcbParentesco, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 120, 170, -1));

        btnModificar.setBackground(new java.awt.Color(255, 255, 153));
        btnModificar.setForeground(new java.awt.Color(0, 0, 255));
        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/update - boton.png"))); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.setEnabled(false);
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        jpDatosGenerales.add(btnModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 160, 120, -1));

        btnCancelar.setBackground(new java.awt.Color(255, 255, 153));
        btnCancelar.setForeground(new java.awt.Color(0, 0, 255));
        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/cancel.png"))); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jpDatosGenerales.add(btnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 160, 110, -1));

        jcheckBoxJefeCarpeta.setText("Jefe de Familia");
        jcheckBoxJefeCarpeta.setEnabled(false);
        jcheckBoxJefeCarpeta.setFocusCycleRoot(true);
        jpDatosGenerales.add(jcheckBoxJefeCarpeta, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 30, 110, -1));

        lbDireccion.setText("Direccion:");
        jpDatosGenerales.add(lbDireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 30, 70, -1));

        txtDireccion.setEditable(false);
        txtDireccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDireccionKeyReleased(evt);
            }
        });
        jpDatosGenerales.add(txtDireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 30, 270, -1));

        jLabel6.setText("CARNET EXT.:");
        jpDatosGenerales.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, -1, -1));

        lbDNI1.setText("DNI/");
        jpDatosGenerales.add(lbDNI1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, -1, -1));

        jpContenedor.add(jpDatosGenerales, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 80, 870, 210));

        jpHistoriasClinicas.setBorder(javax.swing.BorderFactory.createTitledBorder("Historias Clinicas"));
        jpHistoriasClinicas.setOpaque(false);

        jtHistoriasClinicas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DNI", "Ape. Pat.", "Ape. Mat.", "Nombres", "Fecha Nac.", "Sexo", "Parentesco", "N° Carpeta", "Historia Clinica"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtHistoriasClinicas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtHistoriasClinicasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtHistoriasClinicas);

        javax.swing.GroupLayout jpHistoriasClinicasLayout = new javax.swing.GroupLayout(jpHistoriasClinicas);
        jpHistoriasClinicas.setLayout(jpHistoriasClinicasLayout);
        jpHistoriasClinicasLayout.setHorizontalGroup(
            jpHistoriasClinicasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpHistoriasClinicasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1118, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpHistoriasClinicasLayout.setVerticalGroup(
            jpHistoriasClinicasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpHistoriasClinicasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jpContenedor.add(jpHistoriasClinicas, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, 1150, 240));

        lbNCarpeta1.setText("N° Carpeta");
        jpContenedor.add(lbNCarpeta1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 20, -1, -1));

        txtCarpeta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCarpetaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCarpetaKeyTyped(evt);
            }
        });
        jpContenedor.add(txtCarpeta, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 40, 80, -1));

        lbGuion.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbGuion.setText("-");
        jpContenedor.add(lbGuion, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 40, 10, -1));

        txtHistoria.setEditable(false);
        txtHistoria.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtHistoriaKeyReleased(evt);
            }
        });
        jpContenedor.add(txtHistoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 40, 90, -1));

        lbNCarpeta2.setText(" Historia Clinica");
        jpContenedor.add(lbNCarpeta2, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 20, 90, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1180, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jpContenedor, javax.swing.GroupLayout.DEFAULT_SIZE, 1180, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 579, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jpContenedor, javax.swing.GroupLayout.PREFERRED_SIZE, 579, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Valida el apellido paterno
     * @param evt 
     */
    private void txtApeParKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApeParKeyTyped
         pac.validarNombres(txtApePar, evt);//controla solamente letras
    }//GEN-LAST:event_txtApeParKeyTyped

    /**
     * Valida el apellido materno
     * @param evt 
     */
    private void txtApeMatKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApeMatKeyTyped
        pac.validarNombres(txtApeMat, evt);//controla solamente letras
    }//GEN-LAST:event_txtApeMatKeyTyped

    /**
     * Valida el nombre
     * @param evt 
     */
    private void txtNombresKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombresKeyTyped
         pac.validarNombres(txtNombres, evt);//controla solamente letras
    }//GEN-LAST:event_txtNombresKeyTyped

    /**
     * Cancela la accion, regresando a la interfaz principal
     * @param evt 
     */
    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        dispose();//cierra la ventana
    }//GEN-LAST:event_btnCancelarActionPerformed

    /**
     * Ejecuta la funcion para CompletaDatos en la tabla
     * @param evt 
     */
    private void txtCarpetaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCarpetaKeyReleased
        String codCarpeta;
        int a;
        try { 
            if(evt.getKeyCode()==evt.VK_ENTER && !txtCarpeta.getText().isEmpty()){//si se presiona enter
                a=((DefaultTableModel)jtHistoriasClinicas.getModel()).getRowCount();//obtenemos el numero de filas de la tabla
                if(a>0)//si existen filas
                    jtHistoriasClinicas.requestFocus();//colocamos el foco en la tabla
            }
            else{//verifica que la tecla seleccionada no sea enter y el codCarpeta este lleno
                codCarpeta=txtCarpeta.getText();//obtiene el codCarpeta
                Deshabilitar();//deshabilita los campos
                Limpiar();//limpiar la informacion
                papa=0;
                mama=0;
//                esTras=false;
                CompletarDatos(codCarpeta,1);//llena la informacion del numero de carpeta en la tabla
                buscarPadres();
            }
        } catch (SQLException ex) {
            Logger.getLogger(jdActualizarCarpetaFamiliar.class.getName()).log(Level.SEVERE, null, ex);//controla alguna excepcion
        }
    }//GEN-LAST:event_txtCarpetaKeyReleased

    /**
     * Busca los padres de la carpeta familiar
     */
    public void buscarPadres(){
        String pa="";
        int filas = jtHistoriasClinicas.getRowCount();
        for(int i=0;i<filas;i++){
             pa = jtHistoriasClinicas.getModel().getValueAt(i, 7).toString();
             if(pa.equalsIgnoreCase("papa"))
                 papa++;
             if(pa.equalsIgnoreCase("mama"))
                 mama++;
        }
    }
    
    /**
     * Evento asociado a la tabla que obtiene los datos de la fila
     * seleccionada
     * @param evt 
     */
    private void jtHistoriasClinicasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtHistoriasClinicasMouseClicked
        nf = jtHistoriasClinicas.getSelectedRow();
        if(nf>=0){
            try {                           
                obtenerDatosTabla();                
                if(esTras==true){
                    jcbParentesco.setEnabled(true);
                }else{
                    jcbParentesco.setEnabled(false);
                    if(parentesco.equalsIgnoreCase("hijo(a)") || parentesco.equalsIgnoreCase("otros")){
                        jcbSexo.setEnabled(true);
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(jdActualizarCarpetaFamiliar.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            JOptionPane.showMessageDialog(this,"Debe seleccionar una fila",
                   "ERROR",JOptionPane.ERROR_MESSAGE); 
        }
    }//GEN-LAST:event_jtHistoriasClinicasMouseClicked

    /**
     * Valida la carpeta familiar
     * @param evt 
     */
    private void txtCarpetaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCarpetaKeyTyped
        cfc.ValidarCarpetaFamiliar(txtCarpeta, evt);//por ahora valida que solo se ingresen numeros
    }//GEN-LAST:event_txtCarpetaKeyTyped

    /**
     * Ejecuta el evento para realizar la modificacion del paciente
     * @param evt 
     */
    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        nf = jtHistoriasClinicas.getSelectedRow();                       
        if(FilaJefe==nf){//jefe
            datosDeCajas();
            //modificarJefe();
            if(!dni.isEmpty() && (dni.length()==8 || dni.length()==9)){
                if(!direc.isEmpty()){    
                    if(!appat.isEmpty()){
                        if(!apmat.isEmpty()){
                            if(!nom.isEmpty()){
                                if(!fa.getJFormattedTextField().getText().isEmpty()){
                                    if(pac.ValidarFechaNac(fa.getModel())){
                                        if(esTras==true){//traslado
                                            if(parentesco.equalsIgnoreCase(parant)){//parentesco iguales
                                                crearObjetosJefe();
                                            }//fin parentesco iguales
                                            else{//cambio de parentesco
                                                if(parentesco.equalsIgnoreCase("papa")){
                                                    if(papa==0){//Validando al papa
                                                        papa++;       
                                                        crearObjetosJefe();
                                                    }else{
                                                            JOptionPane.showMessageDialog(this,"Ya existe un PAPA",
                                                                    "ERROR",JOptionPane.ERROR_MESSAGE);                                                    
                                                    }
                                                }//fin papa
                                                else if(parentesco.equalsIgnoreCase("mama")){
                                                    if(mama==0){//Validando a la mama
                                                        mama++;
                                                        crearObjetosJefe();
                                                    }else{
                                                        JOptionPane.showMessageDialog(this, "Ya exite una MAMA",
                                                            "ERROR",JOptionPane.ERROR_MESSAGE);
                                                    } 
                                                }//fin mama  
                                                else if(parentesco.equalsIgnoreCase("hijo(a)")) {
                                                    crearObjetosJefe();
                                                }//fin hijo                       
                                            }//fin cambio de parentesco                                            
                                        }//fin traslado
                                        else{//no es traslado
                                            if(historia.isEmpty()){//historia vacia
                                                if(parentesco.equalsIgnoreCase(parant)){//parentesco iguales
                                                    crearObjetosJefe();
                                                }//fin parentesco iguales
                                                else{//cambio de parentesco
                                                    if(parentesco.equalsIgnoreCase("papa")){
                                                        if(papa==0){//Validando papa
                                                            papa++;       
                                                            crearObjetosJefe();
                                                        }else{
                                                                JOptionPane.showMessageDialog(this,"Ya existe un PAPA",
                                                                        "ERROR",JOptionPane.ERROR_MESSAGE);                                                    
                                                        }
                                                    }//fin papa                                                    
                                                    else if(parentesco.equalsIgnoreCase("mama")){
                                                        if(mama==0){//Validando mama
                                                            mama++;
                                                            crearObjetosJefe();
                                                        }else{
                                                            JOptionPane.showMessageDialog(this, "Ya exite una MAMA",
                                                                "ERROR",JOptionPane.ERROR_MESSAGE);
                                                        } 
                                                    }//fin mama  
                                                    else {
                                                        crearObjetosJefe();
                                                    }//fin hijo
                                                }//fin de cambio de parentesco                                                
                                            }//fin historia vacia
                                            else{//historia no vacia
                                                if(parentesco.equalsIgnoreCase(parant)){//parentesco iguales
                                                    if(parentesco.equalsIgnoreCase("papa")){
                                                        if(historia.equals(codcarp+"-A")){//Validadndo historia del papa
                                                            crearObjetosJefe();
                                                        }else{                                                        
                                                            JOptionPane.showMessageDialog(this,"Historia JEFE PAPA:\n "
                                                                    + "[N° "+codcarp+"-A]","ERROR",JOptionPane.ERROR_MESSAGE);
                                                            txtHistoria.requestFocus();
                                                        }                                                        
                                                    }//fin papa                                                    
                                                    else if(parentesco.equalsIgnoreCase("mama")){//Validadndo historia de la mama
                                                        if(historia.equals(codcarp+"-B")){
                                                            crearObjetosJefe();
                                                        }else{                                                        
                                                            JOptionPane.showMessageDialog(this,"Historia JEFE MAMA:\n "
                                                                    + "[N° "+codcarp+"-B]","ERROR",JOptionPane.ERROR_MESSAGE);
                                                            txtHistoria.requestFocus();
                                                        }                                                    
                                                    }//fin jefe mama
                                                    else if(parentesco.equalsIgnoreCase("hijo(a)")){
                                                        if(historia.equals(codcarp+"-C")){
                                                            crearObjetosJefe();
                                                        }else{                                                        
                                                            JOptionPane.showMessageDialog(this,"Historia JEFE HIJO:\n "
                                                                    + "[N° "+codcarp+"-C]","ERROR",JOptionPane.ERROR_MESSAGE);
                                                            txtHistoria.requestFocus();
                                                        }                                                   
                                                    }//fin jefe hijo
                                                }//fin de parentesco iguales
                                                else{//cambio en el parentesco
                                                    if(parentesco.equalsIgnoreCase("papa")){
                                                        if(papa==0){//Validadndo papa
                                                            papa++;                                                    
                                                            if(historia.equals(codcarp+"-A")){//Validadndo historia del papa
                                                                crearObjetosJefe();
                                                            }else{                                                        
                                                                JOptionPane.showMessageDialog(this,"Historia JEFE PAPA:\n "
                                                                        + "[N° "+codcarp+"-A]","ERROR",JOptionPane.ERROR_MESSAGE);
                                                                txtHistoria.requestFocus();
                                                            }                                                            
                                                        }else{
                                                            JOptionPane.showMessageDialog(this,"Ya existe un PAPA",
                                                                    "ERROR",JOptionPane.ERROR_MESSAGE);                                                    
                                                        }
                                                    }//fin jefe papa
                                                    else if(parentesco.equalsIgnoreCase("mama")){
                                                        if(mama==0){//Validadndo mama
                                                            mama++;
                                                            if(historia.equals(codcarp+"-B")){//Validadndo historia de la mama
                                                                crearObjetosJefe();
                                                            }else{                                                        
                                                                JOptionPane.showMessageDialog(this,"Historia JEFE MAMA:\n "
                                                                        + "[N° "+codcarp+"-B]","ERROR",JOptionPane.ERROR_MESSAGE);
                                                                txtHistoria.requestFocus();
                                                            }
                                                        }else{
                                                            JOptionPane.showMessageDialog(this, "Ya exite una MAMA",
                                                                "ERROR",JOptionPane.ERROR_MESSAGE);
                                                        }                                                    
                                                    }//fin jefe mama
                                                    else if(parentesco.equalsIgnoreCase("hijo(a)")){
                                                        if(historia.equals(codcarp+"-C")){//Validadndo historia del hijo
                                                            crearObjetosJefe();
                                                        }else{                                                        
                                                            JOptionPane.showMessageDialog(this,"Historia JEFE HIJO:\n "
                                                                    + "[N° "+codcarp+"-C]","ERROR",JOptionPane.ERROR_MESSAGE);
                                                            txtHistoria.requestFocus();
                                                        }                                                   
                                                    }//fin jefe hijo                                               
                                                }//fin de cambio de parentesco                                                
                                            }//fin historia no vacia
                                        }//fin no es traslado                                            
                                    }else{
                                        JOptionPane.showMessageDialog(this,"Fecha Nacimiento Incorrecta",
                                            "ERROR",JOptionPane.ERROR_MESSAGE); 
                                    }                                    
                                }else{
                                    JOptionPane.showMessageDialog(this,"Fecha Nacimiento Obligatoria",
                                       "ERROR",JOptionPane.ERROR_MESSAGE); 
                                }                                
                            }else{
                                JOptionPane.showMessageDialog(this,"Nombres obligatorio",
                                   "ERROR",JOptionPane.ERROR_MESSAGE); 
                            }
                        }else{
                            JOptionPane.showMessageDialog(this,"ApMaterno obligatorio",
                               "ERROR",JOptionPane.ERROR_MESSAGE); 
                        }
                    }else{
                        JOptionPane.showMessageDialog(this,"ApPaterno obligatorio",
                           "ERROR",JOptionPane.ERROR_MESSAGE); 
                    }
                }else{
                        JOptionPane.showMessageDialog(this,"Direccion obligatoria",
                           "ERROR",JOptionPane.ERROR_MESSAGE); 
                }
            }else{
                JOptionPane.showMessageDialog(this,"DNI es obligatoria y debe tener (08) dígitos Y/O"
                        + "\nCarnet Extranjeria es obligatoria y debe tener (09) dígitos.",
                   "ERROR",JOptionPane.ERROR_MESSAGE); 
            }//fin validar dni  
        }else{//no jefe
            datosDeCajas();
            //modificarNoJefe();
            if(!dni.isEmpty() && (dni.length()==8 || dni.length()==9)){
                if(!direc.isEmpty()){
                    if(!appat.isEmpty()){
                        if(!apmat.isEmpty()){
                            if(!nom.isEmpty()){ 
                                if(!fa.getJFormattedTextField().getText().isEmpty()){
                                    if(pac.ValidarFechaNac(fa.getModel())){
                                        actualizaPacienteNormal();                                                                                                                      
                                    }else{
                                        JOptionPane.showMessageDialog(this,"Fecha Nacimiento Incorrecta",
                                            "ERROR",JOptionPane.ERROR_MESSAGE); 
                                    }                                    
                                }else{
                                    JOptionPane.showMessageDialog(this,"Fecha Nacimiento Obligatoria",
                                       "ERROR",JOptionPane.ERROR_MESSAGE); 
                                }
                            }else{
                                JOptionPane.showMessageDialog(this,"Nombres obligatorio",
                                   "ERROR",JOptionPane.ERROR_MESSAGE); 
                            }
                        }else{
                            JOptionPane.showMessageDialog(this,"ApMaterno obligatorio",
                               "ERROR",JOptionPane.ERROR_MESSAGE); 
                        }
                    }else{
                        JOptionPane.showMessageDialog(this,"ApPaterno obligatorio",
                           "ERROR",JOptionPane.ERROR_MESSAGE); 
                    }
                }else{
                    JOptionPane.showMessageDialog(this,"Direccion obligatoria",
                       "ERROR",JOptionPane.ERROR_MESSAGE); 
                }
            }else{
                    JOptionPane.showMessageDialog(this,"DNI obligatorio y de (08) dígitos Y/O"
                            + "\nCarnet Extranjeria es obligatoria y debe tener (09) dígitos.",
                       "ERROR",JOptionPane.ERROR_MESSAGE); 
            }                        
        }//fin de no jefe     
    }//GEN-LAST:event_btnModificarActionPerformed
    
    /**
     * COnvierte la direccion a mayúscula
     * @param evt 
     */
    private void txtDireccionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDireccionKeyReleased
        pac.NombreMayuscula(txtDireccion, evt);//para que se pueda escribir en mayusculas en direccion
    }//GEN-LAST:event_txtDireccionKeyReleased

    /**
     * Convierte el apellido paterno a mayuscula
     * @param evt 
     */
    private void txtApeParKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApeParKeyReleased
        pac.NombreMayuscula(txtApePar, evt);//para que se pueda escribir en mayusculas el ape pat
    }//GEN-LAST:event_txtApeParKeyReleased

    /**
     * Convierte el apellido materno a mayúscula
     * @param evt 
     */
    private void txtApeMatKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApeMatKeyReleased
        pac.NombreMayuscula(txtApeMat, evt);//para que se pueda escribir en mayusculas el ape mat
    }//GEN-LAST:event_txtApeMatKeyReleased

    /**
     * Convierte el nombre a mayúscula
     * @param evt 
     */
    private void txtNombresKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombresKeyReleased
         pac.NombreMayuscula(txtNombres, evt);//para que se pueda escribir en mayusculas el nombre
    }//GEN-LAST:event_txtNombresKeyReleased

    /**
     * Valida el documento de identidad
     * @param evt 
     */
    private void txtDNIKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDNIKeyTyped
        pac.ValidarDNIYCE(txtDNI, evt);
    }//GEN-LAST:event_txtDNIKeyTyped

    /**
     * Obtenmos el sexo del combobox
     * @param evt 
     */
    private void jcbSexoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbSexoItemStateChanged
         if(evt.getSource() == jcbSexo){
            sexo = jcbSexo.getSelectedItem().toString();
         }
    }//GEN-LAST:event_jcbSexoItemStateChanged

    /**
     * Obtenemos el parentesco del combobox
     * @param evt 
     */
    private void jcbParentescoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbParentescoItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED){
            parentesco = jcbParentesco.getSelectedItem().toString();
            if(parentesco.equalsIgnoreCase("Papa")){
                jcbSexo.setSelectedIndex(0);
                jcbSexo.setEnabled(false);
            }else if(parentesco.equalsIgnoreCase("Mama")){             
                jcbSexo.setSelectedIndex(1);
                jcbSexo.setEnabled(false);
            }else{
                jcbSexo.setEnabled(true);
            }
         }
    }//GEN-LAST:event_jcbParentescoItemStateChanged

    /**
     * Convierte la historia clínica a mayúscula
     * @param evt 
     */
    private void txtHistoriaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHistoriaKeyReleased
        hcc.HistoriaClinicaMayuscula(txtHistoria, evt);
    }//GEN-LAST:event_txtHistoriaKeyReleased

    /**
     * Actualiza un paciente normal (no es jefe de carpeta familiar)
     */
    public void actualizaPacienteNormal(){
        if(parentesco.equalsIgnoreCase(parant)){//parentesco iguales
            System.out.println("parentesco iguales");
            crearObjetosNoJefe();
        }//fin de parentesco iguales
        else{//cambio de parentescos
            System.out.println("cambio de parentesco");
            if(parentesco.equalsIgnoreCase("papa")){
                System.out.println("validando papa");
                if(papa==0){
                    papa++;       
                    crearObjetosNoJefe();
                    Limpiar();
                }else{
                    JOptionPane.showMessageDialog(this,"Ya existe un PAPA",
                            "ERROR",JOptionPane.ERROR_MESSAGE);                                                    
                }
            }//fin papa
            else if(parentesco.equalsIgnoreCase("mama")){
                System.out.println("validando mama");
                if(mama==0){
                    mama++;
                    crearObjetosNoJefe();
                    Limpiar();
                }else{
                    JOptionPane.showMessageDialog(this, "Ya exite una MAMA",
                        "ERROR",JOptionPane.ERROR_MESSAGE);
                } 
            }//fin mama 
            else{
                System.out.println("otro miembro de la familia");
                crearObjetosNoJefe();
                Limpiar();
            }// otro miembro de la familia
        }//fin de cambio de parentescos  
    }//fin actualizaPacienteNormal
    
    /**
     * Crea objeto para el jefe de carpeta familiar
     */
    public void crearObjetosJefe(){
        hc = new HistoriaClinica(historia);                                    
        pa = new Parentesco(parentesco.substring(0,1));                                        
        p = new Paciente(dni,nom, apmat, appat,fnac,sexo.substring(0, 1),direc,pa,hc,idJefe);
        try {
            p.actualizarJefe(conn);
            Limpiar();
            Deshabilitar();
            JOptionPane.showMessageDialog(this,"Modificacion Exitosa del Jefe",
                "Informacion",JOptionPane.INFORMATION_MESSAGE);                             
            modificarDatosTabla();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,"ERROR",
                "ERROR",JOptionPane.ERROR_MESSAGE); 
            Logger.getLogger(jdActualizarCarpetaFamiliar.class.getName()).log(Level.SEVERE, null, ex);
        }                      
    }
    
    /**
     * Crea objetos para el paciente normal
     */
    public void crearObjetosNoJefe(){
        hc = new HistoriaClinica(historia);
        pa = new Parentesco(parentesco.substring(0,1));        
        p = new Paciente(dni,nom, apmat, appat,fnac,sexo.substring(0,1),direc,pa,hc);
        try {
            p.actualizaPaciente(conn);
            Limpiar();
            Deshabilitar();
            JOptionPane.showMessageDialog(this,"Modificacion Exitosa Paciente",
            "Informacion",JOptionPane.INFORMATION_MESSAGE);  
            modificarDatosTabla();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,"ERROR",
                "ERROR",JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(jdActualizarCarpetaFamiliar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Obtiene los datos de la caja de textos
     */
    public void datosDeCajas(){
        codcarp = txtCarpeta.getText();
        historia = txtHistoria.getText();
        dni = txtDNI.getText();
        appat = txtApePar.getText();
        apmat = txtApeMat.getText();
        nom = txtNombres.getText();
        direc = txtDireccion.getText();
        int mes = fa.getModel().getMonth()+1;        
        fnac = ""+fa.getModel().getDay()+"-"+mes+"-"+fa.getModel().getYear();                        
        sexo = jcbSexo.getSelectedItem().toString();        
        parentesco = jcbParentesco.getSelectedItem().toString();        
    }//fin datosDeCajas
    
    /**
     * Modifica los datos de la tabla de una fila seleccionada
     */
    public void modificarDatosTabla(){
        //dni, appat, apmat, nom, fechnac, direcc, sexo, parentesco, nro. carp, hc.N, hc.V
        jtHistoriasClinicas.getModel().setValueAt(dni, nf, 0);
        jtHistoriasClinicas.getModel().setValueAt(appat, nf, 1);
        jtHistoriasClinicas.getModel().setValueAt(apmat, nf, 2);
        jtHistoriasClinicas.getModel().setValueAt(nom, nf, 3);
        jtHistoriasClinicas.getModel().setValueAt(fnac, nf, 4);
        jtHistoriasClinicas.getModel().setValueAt(direc, nf, 5);
        jtHistoriasClinicas.getModel().setValueAt(sexo.substring(0,1), nf, 6);
        jtHistoriasClinicas.getModel().setValueAt(parentesco, nf, 7);
        jtHistoriasClinicas.getModel().setValueAt(codcarp, nf, 8);
        jtHistoriasClinicas.getModel().setValueAt(historia, nf, 9);
    }//fin modificarDatos
    
    /**
     * Configuraciones generales de la interfaz
     */
    public void Configuraciones(){
        this.setTitle("Actualizar Datos");
        jpContenedor.setBorder(new ImagenMDI());//aplicamos la imagen de fondo
//        Deshabilitar();
    }//fin Configuraciones
    
    /**
     * Obtiene los datos de la tabla enviandolo a las cajas de texto
     * @throws SQLException 
     */
    public void obtenerDatosTabla() throws SQLException{        
        String PartesFechas[];
        
        dni = jtHistoriasClinicas.getModel().getValueAt(nf, 0).toString().trim();
        txtDNI.setText(dni);            

        appat = jtHistoriasClinicas.getModel().getValueAt(nf, 1).toString();
        txtApePar.setText(appat);

        apmat = jtHistoriasClinicas.getModel().getValueAt(nf, 2).toString();
        txtApeMat.setText(apmat);

        nom = jtHistoriasClinicas.getModel().getValueAt(nf, 3).toString();
        txtNombres.setText(nom);

        fnac = jtHistoriasClinicas.getModel().getValueAt(nf, 4).toString();
        PartesFechas=fnac.split("-");
        try{
            fa.getModel().setDay(Integer.parseInt(PartesFechas[0]));
            fa.getModel().setMonth(Integer.parseInt(PartesFechas[1])-1);
            fa.getModel().setYear(Integer.parseInt(PartesFechas[2]));
        }catch(NumberFormatException e){
            
        }        

        direc = jtHistoriasClinicas.getModel().getValueAt(nf, 5).toString();
        txtDireccion.setText(direc);

        sexo = jtHistoriasClinicas.getModel().getValueAt(nf, 6).toString();    
        if(sexo.equalsIgnoreCase("m"))
            jcbSexo.setSelectedItem("MASCULINO");
        else
            jcbSexo.setSelectedItem("FEMENINO");

        parentesco = jtHistoriasClinicas.getModel().getValueAt(nf, 7).toString();            
        parant = parentesco;          
        jcbParentesco.setSelectedItem(parentesco);
        
        historia = jtHistoriasClinicas.getModel().getValueAt(nf, 9).toString();
        String[] split = historia.split("-");        
        codcarp = txtCarpeta.getText();
        if(historia.isEmpty()){
            esTras = false;            
        }else{
            if(!codcarp.equals(split[0])){
                esTras = true;                
            }else{ 
                esTras = false;                
            }
        }        
        txtHistoria.setText(historia);
                
        if(FilaJefe==nf){            
            if(historia.isEmpty())
                txtHistoria.setEditable(true);                
            else
                txtHistoria.setEditable(false);           
            jcheckBoxJefeCarpeta.setSelected(true);
            HabilitarParaModificarJefe();
        }else{
            jcheckBoxJefeCarpeta.setSelected(false);
            HabilitarParaModificarNormal();
        }
    }//fin obtenerDatosTabla
        
    /**
     * Completa los datos en la tabla despues de haber ingresado un 
     * codigo de carpeta, ni bien cargaDatos ya se sabe la fila del jefe
     * @param codCarpeta
     * @param DeDonde
     * @throws SQLException 
     */
    public void CompletarDatos(String codCarpeta,int DeDonde) throws SQLException{//nos trae todos los integrantes de la carpeta
        CarpetaFamiliar carpetafamiliar,cf;
        HistoriaClinica hc;
        Paciente paciente;
        int tam;
        tam=codCarpeta.length();
        if(tam==0)
             pt.TablaPacientes(jtHistoriasClinicas);// coge las propiedades de la tabla necesaria
        else{
            pt.TablaPacientes(jtHistoriasClinicas);
            carpetafamiliar=new CarpetaFamiliar();
            cf=carpetafamiliar.ConsultarCarpetaFamiliar(codCarpeta);//devuelve un objeto carpeta familiar con todas las historias que le corresponden
            for(int i=0;i<cf.getHistorias().size();i++){//obtenemos un arraylist de historias clinicas
                hc=cf.getHistorias().get(i);
                paciente=hc.getDuenno();//obtenemos el paciente con la historia clinica obtenida
                if(paciente.isJefeFamilia()){//verificamos si es jefe de familia
                    FilaJefe=i;//guardamos la fila en la que esta el jefe de familia
                    idJefe=paciente.getReferencia();//guardamos el codigo del jefe de familia
                    System.out.println("Referencia: "+idJefe);
                }
                Object fila[]={paciente.getDNI(),paciente.getApPat().trim(),paciente.getAptMat().trim(),paciente.getNombre().trim(),paciente.getFecha(),paciente.getDireccion().trim(),paciente.getSexo(),paciente.getPa().getDenominacion().trim(),cf.getCarpetaFamiliar(),hc.getHc()};//cargamos de datos la fila de la tabla
                ((DefaultTableModel)jtHistoriasClinicas.getModel()).addRow(fila);//añadimos la fila
            }
            if(DeDonde==0){//si es que viene de una seleccion en la tabla de la interfaz principal
                txtCarpeta.setText(codCarpeta);
                //txtCarpeta.setEditable(false);
            }
        }
    }//fin CompletarDatos
    
    /**
     * Llena el combobox con los parentesco obtenidos de la Base de Datos
     * @throws SQLException 
     */
    public void LlenarCombo() throws SQLException{//llenamos el combo parentesco
        Parentesco parentesco;
        ArrayList<Parentesco> parentescos;
        parentesco=new Parentesco();
        parentescos=parentesco.ConsultarParentesco();//nos devuelve un array de parentesco que existan en la base de datos
        for(int i=0;i<parentescos.size();i++){
            jcbParentesco.addItem(parentescos.get(i).getDenominacion().trim());//añadimos las opciones al combobox.
        }
    }//fin LlenarCombo
    
    /**
     * Habiliar las cajas para modificar al jefe de carpeta familiar
     */
    public void HabilitarParaModificarJefe(){//habilita las cajas para la modificacion
        txtDNI.setEditable(true);
        txtApePar.setEditable(true);
        txtApeMat.setEditable(true);
        txtNombres.setEditable(true);
        txtDireccion.setEditable(true);
        fa.getJFormattedTextField().setEditable(true);
        btnModificar.setEnabled(true);
    }//fin HabilitarParaMOdicarJefe
    
    /**
     * Habiliar las cajas para modificar al paciente normal
     */
    public void HabilitarParaModificarNormal(){
        txtDNI.setEditable(true);
        txtApePar.setEditable(true);
        txtApeMat.setEditable(true);
        txtNombres.setEditable(true);
        txtDireccion.setEditable(true);
        txtHistoria.setEditable(false);
        fa.getJFormattedTextField().setEditable(true);
        btnModificar.setEnabled(true);
    }//fin HabilitarParaModificarNormal
    
    /**
     * Deshabilita todos los componentes cuando no hay informacion disponible
     */
    public void Deshabilitar(){
        txtDNI.setEditable(false);        
        txtApePar.setEditable(false);
        txtApeMat.setEditable(false);
        txtNombres.setEditable(false);
        txtDireccion.setEditable(false);
        fa.getJFormattedTextField().setEditable(false);
        jcbParentesco.setEnabled(false);
        jcbSexo.setEnabled(false);
        btnModificar.setEnabled(false);
    }//fin Deshabilitar
    
    /**
     * Limpia las caja de texto
     */
    public void Limpiar(){
        txtHistoria.setText("");
        txtDireccion.setText("");
        fa.getJFormattedTextField().setText("");
        txtDNI.setText("");
        txtApePar.setText("");
        txtApeMat.setText("");
        txtNombres.setText("");               
    }//fin Limpiar
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox jcbParentesco;
    private javax.swing.JComboBox jcbSexo;
    private javax.swing.JCheckBox jcheckBoxJefeCarpeta;
    private javax.swing.JPanel jpContenedor;
    private javax.swing.JPanel jpDatosGenerales;
    private javax.swing.JPanel jpFecha;
    private javax.swing.JPanel jpHistoriasClinicas;
    private javax.swing.JTable jtHistoriasClinicas;
    private javax.swing.JLabel lbApeMat;
    private javax.swing.JLabel lbApePat;
    private javax.swing.JLabel lbDNI1;
    private javax.swing.JLabel lbDireccion;
    private javax.swing.JLabel lbFechaNacimiento;
    private javax.swing.JLabel lbGuion;
    private javax.swing.JLabel lbNCarpeta1;
    private javax.swing.JLabel lbNCarpeta2;
    private javax.swing.JLabel lbNombres;
    private javax.swing.JLabel lbParentesco;
    private javax.swing.JLabel lbSexo;
    private javax.swing.JTextField txtApeMat;
    private javax.swing.JTextField txtApePar;
    private javax.swing.JTextField txtCarpeta;
    private javax.swing.JTextField txtDNI;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtHistoria;
    private javax.swing.JTextField txtNombres;
    // End of variables declaration//GEN-END:variables
        
    /**
     * Numero de fila
     */
    private int nf = -1;//nro fila
    /**
     * Es traslado
     */
    private boolean esTras = false;
    //0=solo un papa/mama
    /**
     * Controla 1 sólo papá
     */
    private int papa = 0;
    /**
     * Controla 1 sóla mamá
     */
    private int mama = 0;
    /**
     * Parentesco antiguo
     */
    private String parant = "";
    
    /**
     * Variable global documento de identidad
     */
    private String dni = "";
    /**
     * Variable global apellido paterno
     */
    private String appat = "";
    /**
     * Variable global apellido materno
     */
    private String apmat = "";
    /**
     * Variable global nombres
     */
    private String nom = "";
    /**
     * Variable global fecha de nacimiento
     */
    private String fnac = "";
    /**
     * Variable global direccion
     */
    private String direc = "";
    /**
     * Variable global sexo
     */
    private String sexo = "";
    /**
     * Variable global parentesco
     */
    private String parentesco = "";
    /**
     * Variable global historia
     */
    private String historia = "";
    /**
     * Variable global código de carpeta
     */
    private String codcarp = "";   
        
}
