/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.BorderLayout;
import java.awt.event.ItemEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sourceforge.jdatepicker.impl.JDatePanelImpl;
import net.sourceforge.jdatepicker.impl.JDatePickerImpl;
import net.sourceforge.jdatepicker.impl.UtilDateModel;

/**
 * Interfaz para registrar una carpeta familiar
 * @author Wilson Neira Mijar
 * @author Carlos Nole Machaca
 * @version 1.5.2
 */
public class jdRegistrarCarpetaFamiliar extends javax.swing.JDialog {
    /**
     * Cabecera de la tabla
     */
    String [] head = {"DNI","APE. PATERNO","APE. MATERNO","NOMBRES","FECHA NAC.",
        "DIRECCION","SEXO","PARENTESCO","Nº CARPETA","HC NUEVA","HC ANTIGUA"};
    /**
     * Cuerpo de la tabla
     */
    String[][] body = new String[0][head.length];
    /**
     * Modelo de la tabla
     */
    DefaultTableModel modelo = new DefaultTableModel(body,head);
    /**
     * Formulario del tipo usuario digitador
     */
    frmPrincipal parent;
    /**
     * Formulario del tipo usuario administrador
     */
//    frmAdministrador parent1;
    /**
     * Objeto conexion
     */
    Conexion con;
    /**
     * Obtiene la conexion
     */
    Connection conn;      
    /**
     * Objeto PacienteControl
     */
    PacienteControl pac;
    /**
     * Objeto CarpetaFamiliarControl
     */
    CarpetaFamiliarControl cfc;
    /**
     * Objeto de HistoriaClinicaControl
     */
    HistoriaClinicaControl hcc;
    /**
     * Objeto CarpetaFamiliar
     */
    CarpetaFamiliar carf;
    /**
     * Objeto HistoriaClinica
     */
    HistoriaClinica Histc;
    /**
     * Objeto de Paciente
     */
    Paciente paci;
    /**
     * Indica la fila donde esta el jefe
     */
    int FilaJefe;
    /**
     * Indica que filas de la tabla son translado o registros
     */
    ArrayList RegistroTranslado;
    /**
     * Almacena los motivos en los translados
     */
//    ArrayList<Sumillas> SumillasDeMotivos;
    /**
     * Sera true si es registro y false si es translado
     */
    boolean Directo;
    /**
     * Sera 0 si es registro y 1 si es translado
     */
    int EsRegOTrans;
    /**
     * Variable tipo integer auxiliar
     */
    int i;
    /**
     * Indicaráde que interfaz se está accediendo a ésta
     */
    private int DeDonde;
    /**
     * Variable tipo boolean bandera
     */
    boolean BandCarpeta;
   
    /**
     * Constructor de la interfaz Registrar Carpeta Familiar
     * parent es la ventana de donde se a llamado, modal nos indica si
     * podemos volver a la interfaz de donde fue llamada o no y DeDonde de 
     * que interfaz se a llamado
     * @param parent JFrame
     * @param modal boolean
     * @param DeDonde int
     * @throws SQLException 
     */
    public jdRegistrarCarpetaFamiliar(JFrame parent, boolean modal,int DeDonde) throws SQLException {
        super(parent, modal);
        initComponents();
        this.DeDonde=DeDonde;
        if(DeDonde==0)
            this.parent=(frmPrincipal)parent;
//        else
//            this.parent1=(frmAdministrador)parent;
        fa.getJFormattedTextField().setEditable(true);
        listarSexo();
        con=new Conexion();
        conn=con.getConnection();
        Configuraciones();
        this.setTitle("Registrar Carpeta Familiar");
        jPanelFechNac.setLayout(new BorderLayout());
        jPanelFechNac.add(fa, BorderLayout.CENTER);
        this.setLocationRelativeTo(null);
        jtHistoriasClinicas.setModel(modelo);
        pac=new PacienteControl();
        cfc=new CarpetaFamiliarControl();
        hcc=new HistoriaClinicaControl();
        carf=new CarpetaFamiliar();
        Histc=new HistoriaClinica();
        paci=new Paciente();
        maxCarpeta();
        FilaJefe=-1;
        RegistroTranslado=new ArrayList();
//        SumillasDeMotivos=new ArrayList<>();
        Directo=true;
        EsRegOTrans=0;
        i=0;
        BandCarpeta=false;
        txtCodCarpeta.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpContenedor = new javax.swing.JPanel();
        jpDatosGenerales = new javax.swing.JPanel();
        lbDNI = new javax.swing.JLabel();
        txtDNI = new javax.swing.JTextField();
        lbApePat = new javax.swing.JLabel();
        txtApePar = new javax.swing.JTextField();
        lbApeMat = new javax.swing.JLabel();
        txtApeMat = new javax.swing.JTextField();
        lbNombres = new javax.swing.JLabel();
        txtNombres = new javax.swing.JTextField();
        lbFechaNacimiento = new javax.swing.JLabel();
        jpFecha = new javax.swing.JPanel();
        lbSexo = new javax.swing.JLabel();
        jcbSexo = new javax.swing.JComboBox();
        lbParentesco = new javax.swing.JLabel();
        jcbParentesco = new javax.swing.JComboBox();
        btnAgregar = new javax.swing.JButton();
        btnQuitar = new javax.swing.JButton();
        jcheckBoxJefeCarpeta = new javax.swing.JCheckBox();
        jPanelFechNac = new javax.swing.JPanel();
        lbDireccion = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jpHistoriasClinicas = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtHistoriasClinicas = new javax.swing.JTable();
        lbNCarpeta = new javax.swing.JLabel();
        btnRegistrar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtHistoriaAnt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtCodCarpeta = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtHistoriaNueva = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        btnSalir = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        lbMayorCarpeta = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jpDatosGenerales.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos Generales"));
        jpDatosGenerales.setOpaque(false);

        lbDNI.setText("DNI/");

        txtDNI.setEnabled(false);
        txtDNI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDNIKeyTyped(evt);
            }
        });

        lbApePat.setText("APE. PATERNO:");

        txtApePar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtApeParKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApeParKeyTyped(evt);
            }
        });

        lbApeMat.setText("APE. MATERNO:");

        txtApeMat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtApeMatKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApeMatKeyTyped(evt);
            }
        });

        lbNombres.setText("NOMBRES:");

        txtNombres.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNombresKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombresKeyTyped(evt);
            }
        });

        lbFechaNacimiento.setText("FECHA NAC.:");

        javax.swing.GroupLayout jpFechaLayout = new javax.swing.GroupLayout(jpFecha);
        jpFecha.setLayout(jpFechaLayout);
        jpFechaLayout.setHorizontalGroup(
            jpFechaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jpFechaLayout.setVerticalGroup(
            jpFechaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        lbSexo.setText("SEXO:");

        jcbSexo.setEnabled(false);
        jcbSexo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbSexoItemStateChanged(evt);
            }
        });

        lbParentesco.setText("PARENTESCO:");

        jcbParentesco.setEnabled(false);
        jcbParentesco.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbParentescoItemStateChanged(evt);
            }
        });

        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/down.png"))); // NOI18N
        btnAgregar.setText("Agregar Historia");
        btnAgregar.setEnabled(false);
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnQuitar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/delete.png"))); // NOI18N
        btnQuitar.setText("Quitar");
        btnQuitar.setEnabled(false);
        btnQuitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarActionPerformed(evt);
            }
        });

        jcheckBoxJefeCarpeta.setText("Jefe de Familia");
        jcheckBoxJefeCarpeta.setEnabled(false);
        jcheckBoxJefeCarpeta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jcheckBoxJefeCarpetaMouseClicked(evt);
            }
        });
        jcheckBoxJefeCarpeta.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcheckBoxJefeCarpetaItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelFechNacLayout = new javax.swing.GroupLayout(jPanelFechNac);
        jPanelFechNac.setLayout(jPanelFechNacLayout);
        jPanelFechNacLayout.setHorizontalGroup(
            jPanelFechNacLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );
        jPanelFechNacLayout.setVerticalGroup(
            jPanelFechNacLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        lbDireccion.setText("DIRECCION:");

        txtDireccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDireccionKeyReleased(evt);
            }
        });

        jLabel6.setText("CARNET EXT.:");

        javax.swing.GroupLayout jpDatosGeneralesLayout = new javax.swing.GroupLayout(jpDatosGenerales);
        jpDatosGenerales.setLayout(jpDatosGeneralesLayout);
        jpDatosGeneralesLayout.setHorizontalGroup(
            jpDatosGeneralesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDatosGeneralesLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jpDatosGeneralesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbDNI)
                    .addComponent(jLabel6))
                .addGap(21, 21, 21)
                .addComponent(txtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90)
                .addComponent(jcheckBoxJefeCarpeta, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(lbDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jpDatosGeneralesLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(lbApePat)
                .addGap(13, 13, 13)
                .addComponent(txtApePar, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(lbApeMat)
                .addGap(11, 11, 11)
                .addComponent(txtApeMat, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(lbNombres)
                .addGap(18, 18, 18)
                .addComponent(txtNombres, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jpDatosGeneralesLayout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addComponent(jpFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jpDatosGeneralesLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(lbFechaNacimiento)
                .addGap(25, 25, 25)
                .addComponent(jPanelFechNac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(lbParentesco)
                .addGap(20, 20, 20)
                .addComponent(jcbParentesco, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100)
                .addComponent(lbSexo)
                .addGap(20, 20, 20)
                .addComponent(jcbSexo, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jpDatosGeneralesLayout.createSequentialGroup()
                .addGap(484, 484, 484)
                .addComponent(btnAgregar)
                .addGap(69, 69, 69)
                .addComponent(btnQuitar, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jpDatosGeneralesLayout.setVerticalGroup(
            jpDatosGeneralesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDatosGeneralesLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jpDatosGeneralesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpDatosGeneralesLayout.createSequentialGroup()
                        .addComponent(lbDNI)
                        .addGap(6, 6, 6)
                        .addComponent(jLabel6))
                    .addGroup(jpDatosGeneralesLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jpDatosGeneralesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jcheckBoxJefeCarpeta)
                            .addComponent(lbDireccion)
                            .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(16, 16, 16)
                .addGroup(jpDatosGeneralesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbApePat)
                    .addComponent(txtApePar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbApeMat)
                    .addComponent(txtApeMat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbNombres)
                    .addComponent(txtNombres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addComponent(jpFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addGroup(jpDatosGeneralesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbFechaNacimiento)
                    .addComponent(jPanelFechNac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbParentesco)
                    .addComponent(jcbParentesco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbSexo)
                    .addComponent(jcbSexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jpDatosGeneralesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAgregar)
                    .addComponent(btnQuitar)))
        );

        jpHistoriasClinicas.setBorder(javax.swing.BorderFactory.createTitledBorder("Historias Clinicas"));
        jpHistoriasClinicas.setOpaque(false);

        jtHistoriasClinicas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DNI", "APE. PATERNO", "APE. MATERNO", "NOMBRES", "FECHA NAC", "DIRECCION", "SEXO", "PARENTESCO", "N° CARPETA", "HC NUEVA", "HC ANTIGUA"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtHistoriasClinicas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtHistoriasClinicasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtHistoriasClinicas);

        javax.swing.GroupLayout jpHistoriasClinicasLayout = new javax.swing.GroupLayout(jpHistoriasClinicas);
        jpHistoriasClinicas.setLayout(jpHistoriasClinicasLayout);
        jpHistoriasClinicasLayout.setHorizontalGroup(
            jpHistoriasClinicasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpHistoriasClinicasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1088, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpHistoriasClinicasLayout.setVerticalGroup(
            jpHistoriasClinicasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpHistoriasClinicasLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                .addContainerGap())
        );

        lbNCarpeta.setText("N° CARPETA");

        btnRegistrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/save.png"))); // NOI18N
        btnRegistrar.setText("Guardar");
        btnRegistrar.setEnabled(false);
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/cancel.png"))); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.setEnabled(false);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        jLabel1.setText("HC ANTIGUA");

        txtHistoriaAnt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtHistoriaAnt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtHistoriaAntKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtHistoriaAntKeyTyped(evt);
            }
        });

        jLabel2.setText("-");

        txtCodCarpeta.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCodCarpeta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodCarpetaFocusLost(evt);
            }
        });
        txtCodCarpeta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodCarpetaKeyTyped(evt);
            }
        });

        jLabel3.setText("HC NUEVA");

        txtHistoriaNueva.setEnabled(false);
        txtHistoriaNueva.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtHistoriaNuevaFocusLost(evt);
            }
        });
        txtHistoriaNueva.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtHistoriaNuevaKeyReleased(evt);
            }
        });

        jLabel4.setText("-");

        btnSalir.setBackground(new java.awt.Color(255, 255, 153));
        btnSalir.setForeground(new java.awt.Color(0, 0, 255));
        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/exit - boton.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        jLabel5.setText("N° Mayor de Carpeta Registrada:");

        lbMayorCarpeta.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbMayorCarpeta.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jpContenedorLayout = new javax.swing.GroupLayout(jpContenedor);
        jpContenedor.setLayout(jpContenedorLayout);
        jpContenedorLayout.setHorizontalGroup(
            jpContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpContenedorLayout.createSequentialGroup()
                .addGap(400, 400, 400)
                .addComponent(lbNCarpeta)
                .addGap(89, 89, 89)
                .addComponent(jLabel3)
                .addGap(70, 70, 70)
                .addComponent(jLabel1)
                .addGap(238, 238, 238)
                .addComponent(jLabel5))
            .addGroup(jpContenedorLayout.createSequentialGroup()
                .addGap(390, 390, 390)
                .addComponent(txtCodCarpeta, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(txtHistoriaNueva, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(txtHistoriaAnt, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(260, 260, 260)
                .addComponent(lbMayorCarpeta, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jpContenedorLayout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addComponent(jpDatosGenerales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jpContenedorLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jpHistoriasClinicas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jpContenedorLayout.createSequentialGroup()
                .addGap(380, 380, 380)
                .addComponent(btnRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jpContenedorLayout.setVerticalGroup(
            jpContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpContenedorLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jpContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbNCarpeta)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5))
                .addGap(6, 6, 6)
                .addGroup(jpContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbMayorCarpeta, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpContenedorLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jpContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCodCarpeta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtHistoriaNueva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtHistoriaAnt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(10, 10, 10)
                .addComponent(jpDatosGenerales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jpHistoriasClinicas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(jpContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRegistrar)
                    .addComponent(btnCancelar)
                    .addComponent(btnSalir)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1162, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jpContenedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 621, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jpContenedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Valida el documento de identidad
     * @param evt 
     */
    private void txtDNIKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDNIKeyTyped
        pac.ValidarDNIYCE(txtDNI, evt);
    }//GEN-LAST:event_txtDNIKeyTyped

    /**
     * Valida el apellido paterno
     * @param evt 
     */
    private void txtApeParKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApeParKeyTyped
        pac.validarNombres(txtApePar, evt);
    }//GEN-LAST:event_txtApeParKeyTyped

    /**
     * Valida el apellido materno
     * @param evt 
     */
    private void txtApeMatKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApeMatKeyTyped
         pac.validarNombres(txtApeMat, evt);
    }//GEN-LAST:event_txtApeMatKeyTyped

    /**
     * Valida los nombres
     * @param evt 
     */
    private void txtNombresKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombresKeyTyped
         pac.validarNombres(txtNombres, evt);
    }//GEN-LAST:event_txtNombresKeyTyped

    /**
     * Cancela todo lo que se este realizando
     * @param evt ActionEvent
     */
    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        InhabilitarRegistro();
    }//GEN-LAST:event_btnCancelarActionPerformed

    /**
     * Verifica los datos ingresados y si todo es correcto
     * los coloca en la tabla.
     * @param evt 
     */
    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
         direccion = txtDireccion.getText();
            if(!direccion.isEmpty()){
                appat = txtApePar.getText();                     
                if(!appat.isEmpty()){
                    apmat = txtApeMat.getText();              
                    if(!apmat.isEmpty()){
                        nombre = txtNombres.getText();                
                        if(!nombre.isEmpty()){
                                dni = txtDNI.getText();
                                HistAnt=txtHistoriaAnt.getText();
                                codHistoria =txtHistoriaNueva.getText();
//                                if(jf==true){
                                    fechNac=fa.getJFormattedTextField().getText();
                                    int a=jtHistoriasClinicas.getRowCount();//obtenemos la cantidad de filas
                                    if(!dni.isEmpty())//dni no esta vacio
                                    {
                                        if(dni.length()==8 ||dni.length()==9){//verificamos si tiene dni (08) dig 0 CARNET EXT.(09)
                                            System.out.println("Entro por dni/CARNET");
                                            if(!fechNac.isEmpty())
                                            {
                                                System.out.println("entro por fecha");
                                                if(pac.ValidarFechaNac(fa.getModel()))
                                                {
                                                    System.out.println("Valido fecha correctamente");
                                                    int mes = fa.getModel().getMonth()+1;
                                                    fechNac = ""+fa.getModel().getDay()+"-"+mes+"-"+fa.getModel().getYear();
                                                    controlarParentescosTotal(a);
                                                }    
                                                else{
                                                    JOptionPane.showMessageDialog(this,"Fecha de nacimiento incorrecta","ERROR",JOptionPane.ERROR_MESSAGE);
                                                    fa.getJFormattedTextField().requestFocus();
                                                }
                                            }
                                            else{
                                                System.out.println("Entro fecha vacia");
                                                controlarParentescosSoloJefe(a);
                                            }
                                        }
                                        else{
                                            JOptionPane.showMessageDialog(this,"El dni es incorrecto. Debe tener 8 digitos", dni, FilaJefe);
                                            txtDNI.requestFocus();
                                        }
                                    }
                                    else{
                                        System.out.println("Entro dni/carnet vacio");
                                        if(!fechNac.isEmpty())
                                            {
                                                System.out.println("Fecha llena");
                                                if(pac.ValidarFechaNac(fa.getModel()))
                                                {
                                                    System.out.println("Fecha valida");
                                                    int mes = fa.getModel().getMonth()+1;
                                                    fechNac = ""+fa.getModel().getDay()+"-"+mes+"-"+fa.getModel().getYear();
                                                    controlarParentescosSoloJefe(a);
                                                }    
                                                else{
                                                    JOptionPane.showMessageDialog(this,"Fecha de nacimiento incorrecta","ERROR",JOptionPane.ERROR_MESSAGE);
                                                    fa.getJFormattedTextField().requestFocus();
                                                }
                                            }
                                            else{
                                                System.out.println("Fecha vacia");
                                                controlarParentescosSoloJefe(a);
                                            }
                                    }
                            
                        }else
                        {
                            JOptionPane.showMessageDialog(this, "Nombres es obligatorio","ERROR",JOptionPane.ERROR_MESSAGE);
                            txtNombres.requestFocus();
                        }
                    }else
                    {
                        JOptionPane.showMessageDialog(this, "Apellido Materno es obligatorio","ERROR",JOptionPane.ERROR_MESSAGE);
                        txtApeMat.requestFocus();
                    }
                }else
                {
                    JOptionPane.showMessageDialog(this, "Apellido Paterno es obligatorio","ERROR",JOptionPane.ERROR_MESSAGE);
                    txtApePar.requestFocus();
                }
            }else
            {    JOptionPane.showMessageDialog(this, "Direccion es obligatorio","ERROR",JOptionPane.ERROR_MESSAGE);
                 txtDireccion.requestFocus();
            }
            
            System.out.println("Fila Jefe: "+FilaJefe);     
    }//GEN-LAST:event_btnAgregarActionPerformed

    /**
     * Captura cada uno de las filas de la tabla y
     * las registra en la base de datos
     * @param evt <code>ActionEvent</code> 
     * @exception SQLException Cuando algun dato no pueda ser almacenado 
     */
    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
//        // TODO add your handling code here:
//        String sex;
////        Sumillas su = null;
//        int resp;
//        try {
//            int cantFil = jtHistoriasClinicas.getRowCount();
//            int cantCol = jtHistoriasClinicas.getColumnCount();
//            resp=JOptionPane.showConfirmDialog(this,"¿Esta Seguro que desea Registrar Esta informacion.\n Por Favor Verifique bien los datos?","Preguntas",0);
//            if(resp==0)
//            {    
//                codCarpeta = txtCodCarpeta.getText();
//                cf = new CarpetaFamiliar(codCarpeta);
//                cf.registrarCarpeta(conn);
//
//                for(int i=0;i<cantFil;i++){
//    //              "DNI","Ape. Paterno","Ape. Materno","Nombres","Fecha Nac.",
//    //              "Direccion","Sexo","Parentesco","Nº Carpeta","Cod. Historia"
//                    dni = String.valueOf(modelo.getValueAt(i, 0));
//                    System.out.println("DNI: "+dni);
//
//                    appat = String.valueOf(modelo.getValueAt(i, 1));
//                    System.out.println("APELLIDO PATERNO: "+appat);   
//
//                    apmat = String.valueOf(modelo.getValueAt(i, 2));
//                    System.out.println("APELLIDO MATERNO: "+apmat);
//
//                    nombre = String.valueOf(modelo.getValueAt(i, 3));
//                    System.out.println("NOMBRES: "+nombre);
//
//                    fechNac = String.valueOf(modelo.getValueAt(i, 4));
//                    System.out.println("FECHA NAC.: "+fechNac);
//
//                    direccion = String.valueOf(modelo.getValueAt(i, 5));
//                    System.out.println("DIRECCION: "+direccion);
//
//                    sex =modelo.getValueAt(i, 6).toString();  
//                    System.out.println("SEXO: "+sex);
//                    sexo=sex.charAt(0);
//
//                    String aux = String.valueOf(modelo.getValueAt(i, 7));
//                    codParentesco = aux.charAt(0);
//                    System.out.println("PARENTESCO: "+codParentesco);
//
//                    codCarpeta = String.valueOf(modelo.getValueAt(i, 8));                
//                    System.out.println("COD. CARPETA: "+codCarpeta);
//
//                    codHistoria = String.valueOf(modelo.getValueAt(i, 9));
//                    System.out.println("COD. HISTORIA: "+codHistoria); 
//
//                    HistAnt=String.valueOf(modelo.getValueAt(i, 10));
//                    System.out.println("COD. HISTORIA ANT: "+HistAnt);
//
//                    cf = new CarpetaFamiliar(codCarpeta);
//                    pa=new Parentesco(aux.substring(0,1));
//                    hc = new HistoriaClinica(codHistoria,HistAnt,codCarpeta);
//                    if(FilaJefe==i)
//                        p=new Paciente(dni, nombre, apmat, appat, fechNac, sex, direccion,true,pa, cf, hc);
//                    else
//                        p = new Paciente(dni, nombre, apmat, appat, fechNac, sex, direccion,false,pa, cf, hc);
//
//                    //verificar existencia de paciente
//                    //......
//                        //trabajar con bandera hay repeticion
//                        //traer datos de paciente de su dni y su nombre completo
//                    //fin verificacion
//
//                    //empieza el registro
//                    if(Integer.parseInt(RegistroTranslado.get(i).toString())==1)
//                    {
//                        //tratamiento para el translado
//                        p.ModificarPaciente(conn);
//                        hc.modificarHistoria(conn);
//                        //obtener la sumilla correspondiente
//                        for(int j=0;j<SumillasDeMotivos.size();j++){
//                            su=(Sumillas)SumillasDeMotivos.get(j);
//                            if(su.getNumFila()==i){
//                                su.RegistrarSumilla(conn, codHistoria);
//                                break;
//                            }
//                        }
//                    }
//                    else
//                    {
//                        p.registrarPaciente();            
//                        hc.registrarHistoria(conn);
//                    }
//                }//End for
//                if(Integer.parseInt(codCarpeta)>Integer.parseInt(lbMayorCarpeta.getText()))
//                    lbMayorCarpeta.setText(codCarpeta);
//                JOptionPane.showMessageDialog(this, "REGISTRO EXITOSO","INFORMACION",JOptionPane.INFORMATION_MESSAGE);
//                InhabilitarRegistro();
//            }//fin de respuesta de confirmacion
//            //obtener_nro_carpeta(conn);
//        } catch (SQLException ex) {
//            JOptionPane.showMessageDialog(this, "REGISTRO NO SE REALIZO CON EXITO","ERROR",JOptionPane.ERROR_MESSAGE);  
//            Logger.getLogger(jdRegistrarCarpetaFamiliar.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_btnRegistrarActionPerformed

    /**
     * Quita de la tabla alguna Historia Clinica que no
     * se quiera registrar o que tenga algun error
     * @param evt ActionEvent
     */
    private void btnQuitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarActionPerformed
        // TODO add your handling code here:
        String parentesco,histelim,codCarp;
        String ParteHistEli[];
        char letra;
//        Sumillas su;
        nf = jtHistoriasClinicas.getSelectedRow();
        if(nf > -1){
            System.out.println("Estoy en quitar una historia");
            parentesco=((DefaultTableModel)jtHistoriasClinicas.getModel()).getValueAt(nf,7).toString();
            histelim=((DefaultTableModel)jtHistoriasClinicas.getModel()).getValueAt(nf,9).toString();
            ParteHistEli=histelim.split("-");
            codCarp=((DefaultTableModel)jtHistoriasClinicas.getModel()).getValueAt(nf,8).toString();
            letra=histelim.charAt(histelim.length()-1);
            modelo.removeRow(nf);
            jtHistoriasClinicas.setModel(modelo);
            if(parentesco.equalsIgnoreCase("papa")){
                System.out.println("Estoy quitando un papa");
                dad=0;
                if(FilaJefe==nf){
                    jcheckBoxJefeCarpeta.setEnabled(true);
                    FilaJefe=-1;
                }
            }
            else{
                if(parentesco.equalsIgnoreCase("mama")){
                    System.out.println("Estoy quitando una mama");
                    mom=0;
                    if(FilaJefe==nf){
                        jcheckBoxJefeCarpeta.setEnabled(true);
                        FilaJefe=-1;
                    }
                }
                else{
                    System.out.println("Estoy quitando un hijo u otros.");
                    if(parentesco.equalsIgnoreCase("hijo(a)")){
                        System.out.println("Estoy quitando un hijo");
                        if(FilaJefe==nf){
                            jcheckBoxJefeCarpeta.setEnabled(true);
                            FilaJefe=-1;
                        }
                        if(codCarp.equals(ParteHistEli[0]))
                           ReacomodarHistorias(letra,codCarp);
                   }
                    else{
                        System.out.println("Estoy quitando otros");
                        if(codCarp.equals(ParteHistEli[0]))
                            ReacomodarHistorias(letra,codCarp);
                    }
                }
            }
            if(nf<FilaJefe){
                System.out.println("La fila eliminada es menor que la del jefe");
                FilaJefe--;
            }
//            if(Integer.parseInt(RegistroTranslado.get(nf).toString())==1)//verificamos si es un translado
//            {
//                System.out.println("Estamos en un translado");
//                for(int j=0;j<SumillasDeMotivos.size();j++){//buscamos para eliminar la sumilla correspondiente
//                    su=SumillasDeMotivos.get(j);
//                    if(su.getNumFila()==nf){
//                        System.out.println("Sumiilla antes de eliminarse\n"+su.getNumFila()+"---- "+su.getMotivo());
//                        SumillasDeMotivos.remove(j);
//                        break;
//                    }
//                }
//            }
            Directo=true;
            RegistroTranslado.remove(nf);
            limpiarCajas();
            //listando registroTranslado
            System.out.println("++++ArrayTranslado+++++");
            for(int j=0;j<RegistroTranslado.size();j++){
                System.out.println(RegistroTranslado.get(j));
            }
            
            //listado de sumillas
            System.out.println("+++++ArrayMotivos++++++");
//            for(int z=0;z<SumillasDeMotivos.size();z++){
//                System.out.println(SumillasDeMotivos.get(z).getNumFila()+" "+SumillasDeMotivos.get(z).getMotivo());
//            }
        }else
            JOptionPane.showMessageDialog(this, "Debe Seleccionar almenos una fila",
                    "ERROR",JOptionPane.ERROR_MESSAGE);        
    }//GEN-LAST:event_btnQuitarActionPerformed

    /**
     * Ayuda a almacenar el sexo del paciente
     * @param evt ItemEvent
     */
    private void jcbSexoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbSexoItemStateChanged
        // TODO add your handling code here:
        if(evt.getSource() == jcbSexo){
            sexo = jcbSexo.getSelectedItem().toString().charAt(0);
        }
    }//GEN-LAST:event_jcbSexoItemStateChanged

    /**
     * Ayuda a almacenar el parentesco de un paciente
     * @param evt 
     */
    private void jcbParentescoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbParentescoItemStateChanged
        // TODO add your handling code here:
        parentesco = jcbParentesco.getSelectedItem().toString();//obtenesmo el parentesco
        codParentesco = parentesco.charAt(0);
        if(evt.getStateChange() == ItemEvent.SELECTED && i!=0) {
            if(parentesco.equalsIgnoreCase("Papa")){// si es papa                
                jcbSexo.setSelectedIndex(0);//seleccionamos el item masculino
                jcbSexo.setEnabled(false);//inhabilitamos la eleccion del sexo
                if(RegistroTranslado.size()>0){
                    if(Integer.parseInt(RegistroTranslado.get(nf).toString())==0)
                    {
                        txtHistoriaNueva.setText(codCarpeta+"-A");
                    }
                }
                System.out.println("JF es :"+jf);
                System.out.println("Entro en papa itemselected");
            }else 
            {
                if(parentesco.equalsIgnoreCase("Mama")){                
                jcbSexo.setSelectedIndex(1);
                jcbSexo.setEnabled(false);
                if(RegistroTranslado.size()>0){
                    if(Integer.parseInt(RegistroTranslado.get(nf).toString())==0)
                    {
                          txtHistoriaNueva.setText(codCarpeta+"-B");
                      } 
                }
                System.out.println("Entro en mama itemselected");
                }else{
                   if(parentesco.equalsIgnoreCase("hijo(a)")){
                       jcbSexo.setEnabled(true);
                       if(RegistroTranslado.size()>0){
                        if(Integer.parseInt(RegistroTranslado.get(nf).toString())==0)
                        {
                            letraHis=obtener_letra(cantHis);
                            codHistoria=codCarpeta+"-"+letraHis;
                            txtHistoriaNueva.setText(codHistoria);
                            if(FilaJefe==-1)//si no hay jefe
                            {
                                jcheckBoxJefeCarpeta.setEnabled(true);
                            }   
                        }     
                     }
                }
                else{
                       jcheckBoxJefeCarpeta.setEnabled(false);
                       jcheckBoxJefeCarpeta.setSelected(false);
                }   
           }
        }  
        }    
        else
            i++;
    }//GEN-LAST:event_jcbParentescoItemStateChanged

    /**
     * Ayuda a almacenar si va a ser jefe de carpeta o no.
     * @param evt 
     */
    private void jcheckBoxJefeCarpetaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcheckBoxJefeCarpetaItemStateChanged
        // TODO add your handling code here:
        if(jcheckBoxJefeCarpeta.isSelected()==true){
            System.out.println("Jefe Familia");
            jf = true;
        }else{
            System.out.println("no es jefe familia");
            jf = false;
        }                                       
    }//GEN-LAST:event_jcheckBoxJefeCarpetaItemStateChanged

    /**
     * Convierte en mayúscula el apellido paterno
     * @param evt 
     */
    private void txtApeParKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApeParKeyReleased
        pac.NombreMayuscula(txtApePar, evt);
    }//GEN-LAST:event_txtApeParKeyReleased

    /**
     * Convierte en mayúsucla el apellido materno
     * @param evt 
     */
    private void txtApeMatKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApeMatKeyReleased
        pac.NombreMayuscula(txtApeMat,evt);
    }//GEN-LAST:event_txtApeMatKeyReleased

    /**
     * Convierte en mayúscula el nombre
     * @param evt 
     */
    private void txtNombresKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombresKeyReleased
        pac.NombreMayuscula(txtNombres,evt);
    }//GEN-LAST:event_txtNombresKeyReleased

    /**
     * Convierte en mayúsucla la direccion
     * @param evt 
     */
    private void txtDireccionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDireccionKeyReleased
        pac.NombreMayuscula(txtDireccion, evt);
    }//GEN-LAST:event_txtDireccionKeyReleased

    /**
     * Ayuda a seleccionar un fila de la tabla para
     * que pueda ser modificado algun error
     * @param evt 
     */
    private void jtHistoriasClinicasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtHistoriasClinicasMouseClicked
        Directo=false;
        nf=jtHistoriasClinicas.getSelectedRow();
        if(((DefaultTableModel)jtHistoriasClinicas.getModel()).getValueAt(nf,7).toString().equalsIgnoreCase("papa"))//verificamos si el parentesco es papa
        {   
            dad=0;//se reinician la papa
        }
        else{
            if(((DefaultTableModel)jtHistoriasClinicas.getModel()).getValueAt(nf,7).toString().equalsIgnoreCase("mama")){//verificamos si el parentesco es mama
                    mom=0;//se reinician la mama
             }
        }
        ExtraerDatosTabla();
    }//GEN-LAST:event_jtHistoriasClinicasMouseClicked

    /**
     * Verifica si la carpeta familiar existe o no
     * @param evt FocusEvent
     */
    private void txtCodCarpetaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodCarpetaFocusLost
        String codcarpeta;//n° de carpeta recibido
        int NumeroCarpeta;//contendra el numero de la carpeta pasado a entero
        int TamanoCadena;//contendra el tamaño de la cadena
        codcarpeta=txtCodCarpeta.getText();
        if(!codcarpeta.isEmpty())
        {
            try {
                TamanoCadena=codcarpeta.length();
                if(codcarpeta.matches("[0-9]+[A-B]")){//vemos si es un numero y una letra
                    NumeroCarpeta=Integer.parseInt(codcarpeta.substring(0,TamanoCadena-1));
                    codcarpeta=NumeroCarpeta+codcarpeta.substring(TamanoCadena-1,TamanoCadena);
                    ExisteCarpeta(codcarpeta);
                }
                else{
                    if(codcarpeta.matches("[0-9]+")){//solamente es un numero
                        NumeroCarpeta=Integer.parseInt(codcarpeta);
                        codcarpeta=""+NumeroCarpeta;
                        ExisteCarpeta(codcarpeta);
                    }
                    else{
                        JOptionPane.showMessageDialog(this,"N° de carpeta es incorrecto. Ingrese un formato valido.","ERROR",JOptionPane.ERROR_MESSAGE);
                        txtCodCarpeta.requestFocus();
                    }
                }
               
            } catch (SQLException ex) {
                Logger.getLogger(jdRegistrarCarpetaFamiliar.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
             JOptionPane.showMessageDialog(this,"Debe colocar el numero de Carpeta","ERROR",JOptionPane.ERROR_MESSAGE);
             txtCodCarpeta.requestFocus();
        }
    }//GEN-LAST:event_txtCodCarpetaFocusLost

    /**
     * Cierra la intefaz, actualizando los indicadores
     * de cuantas carpetas familiares y cuantos pacientes
     * tenemos registrados
     * @param evt 
     */
    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        try {
            if(DeDonde==0)
                parent.EscribeCantidades();
//            else
//                parent1.EscribeCantidades();
        } catch (SQLException ex) {
            Logger.getLogger(jdRegistrarCarpetaFamiliar.class.getName()).log(Level.SEVERE, null, ex);
        }
        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    /**
     * Verifica si la Historia Clinica nueva tiene
     * el formato correcto, caso contrario muestra un mensaje de error
     * @param evt FocusEvent
     */
    private void txtHistoriaNuevaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtHistoriaNuevaFocusLost
        String Hist;
        int a;//numero de filas de las historia clinicas
        if(jf==false){
           Hist=txtHistoriaNueva.getText();
           a=jtHistoriasClinicas.getRowCount();
           if(!Hist.isEmpty())
           {
               if(hcc.ValidarHCNUEVA(txtHistoriaNueva.getText(),codCarpeta))
               {
                   txtHistoriaAnt.requestFocus();
               }
               else
               {
                   JOptionPane.showMessageDialog(this,"El formato de Historia es Incorrecto.\n Recuerda [N° CARPETA-(Letra [A-Z])]","ERROR",JOptionPane.ERROR_MESSAGE);
                   txtHistoriaNueva.requestFocus();
               }
           }
           else{
               if(a==0){
                   JOptionPane.showMessageDialog(this,"El formato de Historia es Incorrecto.\n Recuerda [N° CARPETA-(Letra [A-Z])]","ERROR",JOptionPane.ERROR_MESSAGE);
                   txtHistoriaNueva.requestFocus();
               }
           }
           
        }
    }//GEN-LAST:event_txtHistoriaNuevaFocusLost

    /**
     * Convierte en mayúscula la historia clínica nueva
     * @param evt 
     */
    private void txtHistoriaNuevaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHistoriaNuevaKeyReleased
        pac.NombreMayuscula(txtHistoriaNueva, evt);
    }//GEN-LAST:event_txtHistoriaNuevaKeyReleased

    /**
     * Evento del checkbos de jefe de carpeta familiar
     * @param evt 
     */
    private void jcheckBoxJefeCarpetaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcheckBoxJefeCarpetaMouseClicked
       if(FilaJefe==-1 && !jcbParentesco.getSelectedItem().toString().equalsIgnoreCase("otros")){
           jcheckBoxJefeCarpeta.setEnabled(true);
       }
    }//GEN-LAST:event_jcheckBoxJefeCarpetaMouseClicked

    /**
     * Valida la carpeta familiar
     * @param evt 
     */
    private void txtCodCarpetaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodCarpetaKeyTyped
        cfc.ValidarCarpetaFamiliar(txtCodCarpeta, evt);
    }//GEN-LAST:event_txtCodCarpetaKeyTyped

    /**
     * Convierte en mayúscula la historia clínica antigua
     * @param evt 
     */
    private void txtHistoriaAntKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHistoriaAntKeyReleased
        hcc.HistoriaClinicaMayuscula(txtHistoriaAnt, evt);
    }//GEN-LAST:event_txtHistoriaAntKeyReleased

    /**
     * Valida la historia clínica antigua
     * @param evt 
     */
    private void txtHistoriaAntKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHistoriaAntKeyTyped
        hcc.ValidarHistoriaClinica(txtHistoriaAnt, evt);
    }//GEN-LAST:event_txtHistoriaAntKeyTyped

    /**
     * Llena el combobox con los sexo 
     */
    public void listarSexo(){
        jcbSexo.addItem("Masculino");
        jcbSexo.addItem("Femenino");
    }
    
    /**
     * Limpia campos especificos del panel datos generales
     */
    public void limpiar(){
        txtApeMat.setText("");
        txtApePar.setText("");
        txtDNI.setText("");
        //txtDireccion.setText("");
        txtNombres.setText("");
        txtHistoriaAnt.setText("");
        jcheckBoxJefeCarpeta.setSelected(false);
    }
    
    /**
     * Limpia todos los campos luego de quitar un fila 
     * de la tabla
     */
    public void limpiarCajas(){
        limpiar();
        txtApeMat.setEnabled(true);
        txtApePar.setEnabled(true);
        txtDireccion.setEnabled(true);
        txtNombres.setEnabled(true);
        txtDNI.setEnabled(true);
        txtHistoriaAnt.setEnabled(true);
        fa.getJFormattedTextField().setEnabled(true);
        txtHistoriaNueva.setEnabled(true);
        txtHistoriaNueva.requestFocus();
    }
    
    /**
     * Consulta y muestra los parentesco
     * @param conn conexion establecida con la base de datos 
     */
    public void listarParentesco(Connection conn){        
        ResultSet rs = null;
        Statement s = null;
        try {
            s = conn.createStatement();
            rs = s.executeQuery("SELECT descripcion FROM \"Parentesco\";");
            while(rs.next()){
                String paren = rs.getString("descripcion");
                jcbParentesco.addItem(paren);
            }
        }catch (SQLException ex) {
            Logger.getLogger(jdRegistrarCarpetaFamiliar.class.getName()).
                    log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Nos da la siguiente letra segun el abecedario
     * @param ch int
     * @return char
     */
    public char obtener_letra(int ch){
        char letra=(char) -1;
        for(int j=1;j<=abecedario.length;j++){
            if(ch==j)
                letra = abecedario[j];            
        }
        return letra;
    }
    
    /**
     * Llena un abecedario desde la letra C en 
     * adelante
     */
    public void llenarAbecedario(){
        int j=1;
        for(char a='C';a<='Z';a++){            
            abecedario[j] = a;
            j++;
        }
    }
    
    /**
     * Habilita algunos campos que pueden ser inhabilitados
     * para realizar alguna accion como por ejemplo al trasladar
     * una historia clinica
     */
    public void HabilitarTodo(){
        jcheckBoxJefeCarpeta.setEnabled(true);
        txtDNI.setEnabled(true);
        jcbParentesco.setEnabled(true);
        txtHistoriaNueva.setEnabled(true);
        txtHistoriaAnt.setEnabled(true);
        txtDireccion.setEnabled(true);
        txtApePar.setEnabled(true);
        txtApeMat.setEnabled(true);
        txtNombres.setEnabled(true);
        fa.getJFormattedTextField().setEnabled(true);
//        btnTraslado.setEnabled(true);
        btnAgregar.setEnabled(true);
        btnCancelar.setEnabled(true);
    }
    
    /**
     * Reacomoda las Historias Clinicas en la tabla
     * cuando alguna de ellas es quitada, este metodo 
     * ayuda a mantener el orden alfabetico
     * @param letra es la letra que corresponde a la Historia que sera quitada
     * @param codCarp numero de la carpeta
     */
    public void ReacomodarHistorias(char letra,String codCarp){
        int a,j;
        String hc;
        String Hist[];
        char letra2;
        a=jtHistoriasClinicas.getRowCount();
        for(j=0;j<a;j++){
            hc=((DefaultTableModel)jtHistoriasClinicas.getModel()).getValueAt(i,9).toString();
            if(!hc.isEmpty())
            {//letra2=Hist.charAt(Hist.length()-1);
                Hist=hc.split("-");
                System.out.println(Hist[0]+" "+Hist[1]);
                if(codCarp.equals(Hist[0]))
                {    
                    letra2=(char)(Hist[1].charAt(0));
                    if(letra2>letra){
                        letra2=(char)(letra2-1);
                        ((DefaultTableModel)jtHistoriasClinicas.getModel()).setValueAt(codCarp+"-"+letra2,j,9);
                    }
                }
            }   
        }
        cantHis--;
    }
    
    /**
     * Traslada toda la informacion de un paciente desde 
     * la interfaz <code>jdConsultarCarpetas</code>
     * @param paciente objeto con todos los datos del paciente
     * @param Motivo por el cual se esta trasladando
     */
//    public void PonerDatosTranslado(Paciente paciente,String Motivo){
//        int a;
//        Sumillas su;
//        a=jtHistoriasClinicas.getRowCount();
//         Object fila[]={paciente.getDNI(),paciente.getApPat().trim(),paciente.getAptMat().trim(),paciente.getNombre().trim(),paciente.getFecha(),paciente.getDireccion().trim(),paciente.getSexo(),paciente.getPa().getDenominacion().trim(),txtCodCarpeta.getText(),paciente.getHc().getHc(),paciente.getHc().getCf()};//cargamos de datos la fila de la tabla
//         ((DefaultTableModel)jtHistoriasClinicas.getModel()).addRow(fila);//añadimos la fila
//         RegistroTranslado.add(1);
//         su=new Sumillas(a, Motivo);
//         SumillasDeMotivos.add(su);
//         System.out.println("**********************************************");
//         for(int j=0;j<SumillasDeMotivos.size();j++){
//              System.out.println(SumillasDeMotivos.get(j).getNumFila()+"\n"+SumillasDeMotivos.get(j).getMotivo());
//         }
//         btnQuitar.setEnabled(true);
//         btnRegistrar.setEnabled(true);
//    }
    
    /**
     * Ayuda a inicializar algunos datos muy
     * importantes al momento del registro
     * @throws SQLException 
     */
    public void Configuraciones() throws SQLException{        
        jpContenedor.setBorder(new ImagenMDI());
        listarParentesco(conn);         
        //obtener_nro_carpeta(conn);        
        llenarAbecedario();     
    }
    
    /**
     * Extrae los datos de la tabla hacia el 
     * panel datos generales 
     */
    public void ExtraerDatosTabla(){// no se podra cambiar la carpeta familiar y la historia clinica de los pacientes
        int fila;
        String[] PartesFechas;
            fila=jtHistoriasClinicas.getSelectedRow();//fila que se seleccionado
            nf=fila;
        if(fila!=-1){
            if(fila==FilaJefe){ //verificamos si la fila que elegimos es la del jefe de familia
                jcheckBoxJefeCarpeta.setSelected(true);// activamos si es jefe el checkbox correspondiente
            }
            else{
                jcheckBoxJefeCarpeta.setSelected(false);// desactivamos en caso contrario
            }
            txtDNI.setText(((DefaultTableModel)jtHistoriasClinicas.getModel()).getValueAt(fila,0).toString());//llenamos el cuadro del dni
            txtApePar.setText(((DefaultTableModel)jtHistoriasClinicas.getModel()).getValueAt(fila,1).toString());//llenamos el cuadro apellido paterno
            txtApeMat.setText(((DefaultTableModel)jtHistoriasClinicas.getModel()).getValueAt(fila,2).toString());//llenamos el cuadro apellido materno
            txtNombres.setText(((DefaultTableModel)jtHistoriasClinicas.getModel()).getValueAt(fila,3).toString());//llenamos los nombres
            PartesFechas=((DefaultTableModel)jtHistoriasClinicas.getModel()).getValueAt(fila,4).toString().split("-");//seleccionamos la fecha de nacimiento
            fa.getModel().setDay(Integer.parseInt(PartesFechas[0]));
            fa.getModel().setMonth(Integer.parseInt(PartesFechas[1])-1);
            fa.getModel().setYear(Integer.parseInt(PartesFechas[2]));
            txtDireccion.setText(((DefaultTableModel)jtHistoriasClinicas.getModel()).getValueAt(fila,5).toString());//llenamos el campo direccion
            if(((DefaultTableModel)jtHistoriasClinicas.getModel()).getValueAt(fila,7).toString().equals("PAPA"))//verificamos si el parentesco es papa
            {   
                jcbParentesco.setSelectedItem("PAPA");//seleccionamos el parentesco papa
            }
            else{
                if(((DefaultTableModel)jtHistoriasClinicas.getModel()).getValueAt(fila,7).toString().equals("MAMA")){//verificamos si el parentesco es mama
                    jcbParentesco.setSelectedItem("MAMA");//seleccionamos el parentesco mama
                }
                else{
                    jcbParentesco.setSelectedItem(((DefaultTableModel)jtHistoriasClinicas.getModel()).getValueAt(fila,7).toString());//seleccionamos cualquiera de los dos
                    if(((DefaultTableModel)jtHistoriasClinicas.getModel()).getValueAt(fila,6).toString().equalsIgnoreCase("M"))
                        jcbSexo.setSelectedIndex(0);
                    else
                        jcbSexo.setSelectedIndex(1);
                }
            }
            txtHistoriaAnt.setText(((DefaultTableModel)jtHistoriasClinicas.getModel()).getValueAt(fila,10).toString());//llenamos la historia clinica
            txtHistoriaNueva.setText(((DefaultTableModel)jtHistoriasClinicas.getModel()).getValueAt(fila,9).toString());
            txtHistoriaNueva.setEnabled(false);
            if(Integer.parseInt(RegistroTranslado.get(fila).toString())==1){
                inhabilitarTranslado();
            }
        }
        else{
            JOptionPane.showMessageDialog(null,"Debe seleccionar una fila","VALIDADOR",JOptionPane.INFORMATION_MESSAGE);//en caso no seleccione nada
        }
        
    }
    
    /**
     * inhabilita algunas opciones que no se pueden modificar
     * al trasladar una historia clinica a otra carpeta
     */
    public void inhabilitarTranslado(){
        txtHistoriaAnt.setEnabled(false);
        txtDNI.setEnabled(false);
        txtApePar.setEnabled(false);
        txtApeMat.setEnabled(false);
        txtNombres.setEnabled(false);
        fa.getJFormattedTextField().setEnabled(false);
    }
        
    /**
     * Actualiza los datos de una determinada fila de la tabla
     * por los nuevos datos corregidos
     * @param dnin
     * @param appat
     * @param apmat
     * @param nombre
     * @param FechaNac
     * @param direccion
     * @param sexo
     * @param parentesco
     * @param Histn
     * @param Historiaant 
     */
     private void ActualizarDatosJefe(String dnin, String appat, String apmat,String nombre, String FechaNac, String direccion,char sexo,String parentesco,String Histn,String Historiaant) {
        ((DefaultTableModel)jtHistoriasClinicas.getModel()).setValueAt(dnin,nf,0);
        ((DefaultTableModel)jtHistoriasClinicas.getModel()).setValueAt(appat,nf,1);
        ((DefaultTableModel)jtHistoriasClinicas.getModel()).setValueAt(apmat,nf,2);
        ((DefaultTableModel)jtHistoriasClinicas.getModel()).setValueAt(nombre,nf,3);
        ((DefaultTableModel)jtHistoriasClinicas.getModel()).setValueAt(FechaNac,nf,4);
        ((DefaultTableModel)jtHistoriasClinicas.getModel()).setValueAt(direccion,nf,5);
        ((DefaultTableModel)jtHistoriasClinicas.getModel()).setValueAt(sexo,nf,6);
        ((DefaultTableModel)jtHistoriasClinicas.getModel()).setValueAt(parentesco,nf,7);
        ((DefaultTableModel)jtHistoriasClinicas.getModel()).setValueAt(Histn,nf,9);
        ((DefaultTableModel)jtHistoriasClinicas.getModel()).setValueAt(Historiaant,nf,10);
        if(jf){
            FilaJefe=nf;
        }
    }
    
    /**
     * envia los datos de un paciente a la
     * tabla, este metodo tiene en cuenta si son recien ingresados o alguna
     * modificacion de algun error
     */ 
    public void LlenarTabla(){
        if(Directo)//recien ingresados
        {
            Object[] nuevaFila = {dni,appat,apmat,nombre,fechNac,direccion,
            sexo,parentesco,codCarpeta,codHistoria,HistAnt};//NUEVA FILA
            modelo.addRow(nuevaFila);
            jtHistoriasClinicas.setModel(modelo);
            RegistroTranslado.add(0);//como registro
            btnQuitar.setEnabled(true);
            btnRegistrar.setEnabled(true);
        }
        else{//hace modificaciones en una fila determinada por nf
            ActualizarDatosJefe(dni, appat, apmat, nombre, fechNac, direccion,sexo,parentesco,codHistoria,HistAnt);
            Directo=true;//para que pueda registrar otra historia
            HabilitarTodo();
        }
        limpiarCajas();//limpiamos todas las cajas    
    }
        
    /**
     * Verifica algunas atribuciones brindadas
     * al jefe de carpeta y lo agrega a la tabla
     * @param a int 
     */
    public void controlarParentescosSoloJefe(int a){
        String parteHis[];
        if(jcbParentesco.getSelectedItem().toString().equalsIgnoreCase("papa")){//si es papa
              if(jf==true){
                  if(!codHistoria.isEmpty())//si historia contiene algo
                  {
                              PosibleHistoria=codCarpeta+"-A";  
                              if(codHistoria.equals(PosibleHistoria)){
                                  if(dad==0){//vemos si existe un papa, si no existe
                                      dad++;
                                      FilaJefe=a; //indicamos la fila donde esta el jefe
                                      LlenarTabla();
                                      jcheckBoxJefeCarpeta.setEnabled(false);
                                  }
                                  else{
                                        JOptionPane.showMessageDialog(this, "Ya exite un Papa","ERROR",JOptionPane.ERROR_MESSAGE);  // si ya existe un papa
                                  }
                              }
                              else{
                                  parteHis=codHistoria.split("-");
                                  if(!parteHis[0].equals(codCarpeta)){
                                      if(dad==0){//vemos si existe un papa, si no existe
                                        dad++;
                                        FilaJefe=a; //indicamos la fila donde esta el jefe
                                        LlenarTabla();
                                        jcheckBoxJefeCarpeta.setEnabled(false);
                                      }
                                       else{
                                            JOptionPane.showMessageDialog(this, "Ya exite un Papa","ERROR",JOptionPane.ERROR_MESSAGE);  // si ya existe un papa
                                        }
                                  }
                                  else
                                  {
                                      JOptionPane.showMessageDialog(this,"La historia es incorrecta para el Jefe de Carpeta.\n Corrigala por :"+PosibleHistoria,"ERROR",JOptionPane.ERROR_MESSAGE);
                                      txtHistoriaNueva.requestFocus();
                                  }
                                    
                              }//fin comprobar historia
                  }
                  else//historia nula
                  {
                      if(dad==0){//vemos si existe un papa, si no existe
                           dad++;
                           FilaJefe=a; //indicamos la fila donde esta el jefe
                           LlenarTabla();
                           jcheckBoxJefeCarpeta.setEnabled(false);
                      }
                      else{
                           JOptionPane.showMessageDialog(this, "Ya exite un Papa","ERROR",JOptionPane.ERROR_MESSAGE);  // si ya existe un papa
                      }
                  }   
              }
              else{
                  JOptionPane.showMessageDialog(this,"Tiene que ingresar todos los datos","ERROR",JOptionPane.ERROR_MESSAGE);
              }
        }//fin de parentesco papa
        else{
        if(jcbParentesco.getSelectedItem().toString().equalsIgnoreCase("mama")){//si es mama
              if(jf==true){
                  if(!codHistoria.isEmpty())//si historia contiene algo
                  {
                              PosibleHistoria=codCarpeta+"-B";  
                              if(codHistoria.equals(PosibleHistoria)){
                                  if(mom==0){//vemos si existe un mama, si no existe
                                      mom++;
                                      FilaJefe=a; //indicamos la fila donde esta el jefe
                                      LlenarTabla();
                                      jcheckBoxJefeCarpeta.setEnabled(false);
                                  }
                                  else{
                                        JOptionPane.showMessageDialog(this, "Ya exite una mama","ERROR",JOptionPane.ERROR_MESSAGE);  // si ya existe un papa
                                  }
                              }
                              else{
                                  parteHis=codHistoria.split("-");
                                  if(!parteHis[0].equals(codCarpeta)){
                                      if(mom==0){//vemos si existe un papa, si no existe
                                        mom++;
                                        FilaJefe=a; //indicamos la fila donde esta el jefe
                                        LlenarTabla();
                                        jcheckBoxJefeCarpeta.setEnabled(false);
                                      }
                                       else{
                                            JOptionPane.showMessageDialog(this, "Ya exite un Papa","ERROR",JOptionPane.ERROR_MESSAGE);  // si ya existe un papa
                                        }
                                  }
                                  else{
                                    JOptionPane.showMessageDialog(this,"La historia es incorrecta para el Jefe de Carpeta.\n Corrigala por :"+PosibleHistoria,"ERROR",JOptionPane.ERROR_MESSAGE);
                                    txtHistoriaNueva.requestFocus();
                                  }
                              }
                  }
                  else//historia nula
                  {
                      if(mom==0){//vemos si existe un mama, si no existe
                           mom++;
                           FilaJefe=a; //indicamos la fila donde esta el jefe
                           LlenarTabla();
                           jcheckBoxJefeCarpeta.setEnabled(false);
                      }
                      else{
                           JOptionPane.showMessageDialog(this, "Ya exite una mama","ERROR",JOptionPane.ERROR_MESSAGE);  // si ya existe un papa
                      }
                  }   
              }
              else{
                  JOptionPane.showMessageDialog(this,"Tiene que ingresar todos los datos","ERROR",JOptionPane.ERROR_MESSAGE);
              }
        }//fin parentesco mama
        else{
            if(jcbParentesco.getSelectedItem().toString().equalsIgnoreCase("hijo(a)")){//si es hijo(a)
              if(jf==true){
                  if(!codHistoria.isEmpty())//si historia contiene algo
                  {
                           if(Directo){   
                              PosibleHistoria=codCarpeta+"-C";  
                              if(codHistoria.equals(PosibleHistoria)){
                                      FilaJefe=a; //indicamos la fila donde esta el jefe
                                      LlenarTabla();
                                      cantHis++;
                                      jcheckBoxJefeCarpeta.setEnabled(false);
                              }
                              else{
                                  parteHis=codHistoria.split("-");
                                  if(!parteHis[0].equals(codCarpeta)){
                                        FilaJefe=a; //indicamos la fila donde esta el jefe
                                        LlenarTabla();
                                        jcheckBoxJefeCarpeta.setEnabled(false);
                                  }
                                  else{
                                    JOptionPane.showMessageDialog(this,"La historia es incorrecta para el Jefe de Carpeta.\n Corrigala por :"+PosibleHistoria,"ERROR",JOptionPane.ERROR_MESSAGE);
                                    txtHistoriaNueva.requestFocus();
                                  }
                              }
                           }
                           else{
                               PosibleHistoria=codCarpeta+"-C";  
                              if(codHistoria.equals(PosibleHistoria)){
                                      FilaJefe=a; //indicamos la fila donde esta el jefe
                                      LlenarTabla();
                                      jcheckBoxJefeCarpeta.setEnabled(false);
                              }
                              else{
                                  parteHis=codHistoria.split("-");
                                  if(!parteHis[0].equals(codCarpeta)){
                                        FilaJefe=a; //indicamos la fila donde esta el jefe
                                        LlenarTabla();
                                        jcheckBoxJefeCarpeta.setEnabled(false);
                                  }
                                  else{
                                    JOptionPane.showMessageDialog(this,"La historia es incorrecta para el Jefe de Carpeta.\n Corrigala por :"+PosibleHistoria,"ERROR",JOptionPane.ERROR_MESSAGE);
                                    txtHistoriaNueva.requestFocus();
                                  }
                              }
                           }
                  }
                  else//historia nula
                  {
                       System.out.println("entro 1");
                       if(Directo){
                           FilaJefe=a; //indicamos la fila donde esta el jefe
                           LlenarTabla();
                           cantHis++;
                           jcheckBoxJefeCarpeta.setEnabled(false);
                       }
                       else{
                           FilaJefe=a; //indicamos la fila donde esta el jefe
                           LlenarTabla();
                           jcheckBoxJefeCarpeta.setEnabled(false);
                       }
                  }   
              }
              else{
                  JOptionPane.showMessageDialog(this,"Tiene que ingresar todos los datos","ERROR",JOptionPane.ERROR_MESSAGE);
              }
            }//fin parentesco hijo
            else{
                JOptionPane.showMessageDialog(this,"Tiene que ingresar todos los datos","ERROR",JOptionPane.ERROR_MESSAGE);
            }//otros parentescos
          }      
        }
    }
        
    /**
     * Segun el parentesco ayuda a verificar que los datos ingresados para 
     * ese parentesco sean los correctos y los agrega a la tabla
     * @param a int 
     */
    public void controlarParentescosTotal(int a){
        String parteHis[];
        if(jcbParentesco.getSelectedItem().toString().equalsIgnoreCase("papa")){//si es papa
            System.out.println("Antes de ingresar aqui: JF es "+jf);
              if(jf==true){
                  System.out.println("PAPA Se metio como jefe");
                  if(!codHistoria.isEmpty())//si historia contiene algo
                  {
                      System.out.println("Tiene historia llena");
                      PosibleHistoria=codCarpeta+"-A";
                      if(codHistoria.equals(PosibleHistoria)){
                          if(dad==0){//vemos si existe un papa, si no existe
                              dad++;
                              FilaJefe=a; //indicamos la fila donde esta el jefe
                              LlenarTabla();
                              jcheckBoxJefeCarpeta.setEnabled(false);
                          }
                          else{
                                JOptionPane.showMessageDialog(this, "Ya exite un Papa","ERROR",JOptionPane.ERROR_MESSAGE);  // si ya existe un papa
                          }
                      }//fin posible historia
                      else{
                          System.out.println("Comprobando si es translado");
                          parteHis=codHistoria.split("-");
                          if(!parteHis[0].equals(codCarpeta)){//los codcarpeta seran diferentes cuando sea de translado
                              if(dad==0){//vemos si existe un papa, si no existe
                                dad++;
                                FilaJefe=a; //indicamos la fila donde esta el jefe
                                LlenarTabla();
                                jcheckBoxJefeCarpeta.setEnabled(false);
                              }
                               else{
                                    JOptionPane.showMessageDialog(this, "Ya exite un Papa","ERROR",JOptionPane.ERROR_MESSAGE);  // si ya existe un papa
                                }
                          }//fin si es translado
                          else{
                            JOptionPane.showMessageDialog(this,"La historia es incorrecta para el PAPA Jefe de Carpeta.\n Corrigala por :"+PosibleHistoria,"ERROR",JOptionPane.ERROR_MESSAGE);
                            txtHistoriaNueva.requestFocus();
                          }
                      }//fin translado  
                  }//fin si hay historia
                  else//historia nula o vacia
                  {
                      System.out.println("No tiene historia");
                      if(dad==0){//vemos si existe un papa, si no existe
                           dad++;
                           FilaJefe=a; //indicamos la fila donde esta el jefe
                           LlenarTabla();
                           jcheckBoxJefeCarpeta.setEnabled(false);
                      }
                      else{
                           JOptionPane.showMessageDialog(this, "Ya exite un Papa","ERROR",JOptionPane.ERROR_MESSAGE);  // si ya existe un papa
                      }
                  }   
              }//fin si es jefe
              else{
                  System.out.println("Se metio como no jefe");
                  if(!codHistoria.isEmpty())
                  {
                       System.out.println("Tiene historia llena");
                            PosibleHistoria=codCarpeta+"-A";
                            //if(aa!=-1){
                            if(codHistoria.equals(PosibleHistoria)){     
                                if(dad==0){//vemos si existe un papa, si no existe
                                         dad++;
                                         LlenarTabla();
                                  }
                                  else{
                                       JOptionPane.showMessageDialog(this, "Ya exite un Papa","ERROR",JOptionPane.ERROR_MESSAGE);  // si ya existe un papa
                                  }
                            }//fin de historia cuando hijo es jefe
                            else{//vemos si viene de translado
                                System.out.println("Si es translado");
                                parteHis=codHistoria.split("-");
                                  if(!parteHis[0].equals(codCarpeta)){
                                      if(dad==0){//vemos si existe un papa, si no existe
                                        dad++;
                                        LlenarTabla();
                                      }
                                       else{
                                            JOptionPane.showMessageDialog(this, "Ya exite un Papa","ERROR",JOptionPane.ERROR_MESSAGE);  // si ya existe un papa
                                        }
                                  }
                                  else{
                                    JOptionPane.showMessageDialog(this, "La Historia es incorrecta para el PAPA.\n Por favor corrijala por: "+codCarpeta+"-A","ERROR",JOptionPane.ERROR_MESSAGE);
                                    txtHistoriaNueva.requestFocus();
                                }
                            }//fin translado
                      }
                else{
                 JOptionPane.showMessageDialog(this,"La HC NUEVA es obligatoria","ERROR",JOptionPane.ERROR_MESSAGE);
                } 
          }//fin no es jefe 
        }//fin de parentesco papa
        else{
            if(jcbParentesco.getSelectedItem().toString().equalsIgnoreCase("mama")){//si es mama
              if(jf==true){
                  System.out.println("Se metio como mama jefe");
                  if(!codHistoria.isEmpty())//si historia contiene algo
                  {
                      System.out.println("Entra porque la mama tiene historia llena");
                      PosibleHistoria=codCarpeta+"-B";  
                              if(codHistoria.equals(PosibleHistoria)){
                                  if(mom==0){//vemos si existe un mama, si no existe
                                      mom++;
                                      FilaJefe=a; //indicamos la fila donde esta el jefe
                                      LlenarTabla();
                                      jcheckBoxJefeCarpeta.setEnabled(false);
                                  }
                                  else{
                                        JOptionPane.showMessageDialog(this, "Ya exite un mama","ERROR",JOptionPane.ERROR_MESSAGE);  // si ya existe un papa
                                  }
                              }
                              else{//es translado
                                  System.out.println("Comprobando si es de translado");
                                  parteHis=codHistoria.split("-");
                                  if(!parteHis[0].equals(codCarpeta)){
                                      if(mom==0){//vemos si existe un papa, si no existe
                                        mom++;
                                        FilaJefe=a; //indicamos la fila donde esta el jefe
                                        LlenarTabla();
                                        jcheckBoxJefeCarpeta.setEnabled(false);
                                      }
                                       else{
                                            JOptionPane.showMessageDialog(this, "Ya exite un mama","ERROR",JOptionPane.ERROR_MESSAGE);  // si ya existe un papa
                                        }
                                  }
                                  else{
                                    JOptionPane.showMessageDialog(this,"La historia es incorrecta para la MAMA Jefe de Carpeta.\n Corrigala por :"+PosibleHistoria,"ERROR",JOptionPane.ERROR_MESSAGE);
                                    txtHistoriaNueva.requestFocus();
                                  }
                              } //fin de comprobacion de historia
                  }
                  else//historia nula
                  {
                      System.out.println("Historia vacia");
                      if(mom==0){//vemos si existe un mama, si no existe
                           mom++;
                           FilaJefe=a; //indicamos la fila donde esta el jefe
                           LlenarTabla();
                           jcheckBoxJefeCarpeta.setEnabled(false);
                      }
                      else{
                           JOptionPane.showMessageDialog(this, "Ya exite un mama","ERROR",JOptionPane.ERROR_MESSAGE);  // si ya existe un papa
                      }
                  }//fin historia vacia   
              }
              else{//no es jefe
                  System.out.println("Mama no es jefe");
                  if(!codHistoria.isEmpty())
                  {
                       System.out.println("Historia llena");
                      PosibleHistoria=codCarpeta+"-B";
                      if(codHistoria.equals(PosibleHistoria)){   
                         if(mom==0){//vemos si existe un mama, si no existe
                                 mom++;
                                 LlenarTabla();
                          }
                          else{
                               JOptionPane.showMessageDialog(this, "Ya exite una mama","ERROR",JOptionPane.ERROR_MESSAGE);  // si ya existe un papa
                          }
                     }//posible historia
                    else{//si es de translado
                          System.out.println("Si es translado");
                        parteHis=codHistoria.split("-");
                      if(!parteHis[0].equals(codCarpeta)){
                          if(mom==0){//vemos si existe una mama, si no existe
                            mom++;
                            LlenarTabla();
                          }
                           else{
                                JOptionPane.showMessageDialog(this, "Ya exite una mama","ERROR",JOptionPane.ERROR_MESSAGE);  // si ya existe un papa
                            }
                       }
                      else{
                        JOptionPane.showMessageDialog(this, "La Historia incorrecta para la MAMA. \nPor favor corrijala por "+PosibleHistoria,"ERROR",JOptionPane.ERROR_MESSAGE);
                        txtHistoriaNueva.requestFocus();
                      }  
                    }//fin translado
                }//fin historia llena
                  else{
                     JOptionPane.showMessageDialog(this,"La HC NUEVA es obligatoria","ERROR",JOptionPane.ERROR_MESSAGE);
                  }
              }
        }//fin parentesco mama
        else{
            if(jcbParentesco.getSelectedItem().toString().equalsIgnoreCase("hijo(a)")){//si es hijo(a)
              if(jf==true){
                  System.out.println("Entro porque el hijo es jefe");
                  if(!codHistoria.isEmpty())//si historia contiene algo
                  {
                      System.out.println("Historia Llena");
                      if(Directo){
                          System.out.println("Se ingresara un jefe de carpeta hijo");
                          PosibleHistoria=codCarpeta+"-C";  
                          if(codHistoria.equals(PosibleHistoria)){
                                  FilaJefe=a; //indicamos la fila donde esta el jefe
                                  LlenarTabla();
                                  cantHis++;
                                  jcheckBoxJefeCarpeta.setEnabled(false);
                          }//fin posible historia
                          else{//si es translado
                              System.out.println("Si es de translado");
                              parteHis=codHistoria.split("-");
                              if(!parteHis[0].equals(codCarpeta)){
                                  FilaJefe=a; //indicamos la fila donde esta el jefe
                                  LlenarTabla();
                                  jcheckBoxJefeCarpeta.setEnabled(false);
                              }
                              else{
                                JOptionPane.showMessageDialog(this,"La historia es incorrecta para el Hijo(a) Jefe de Carpeta.\n Corrigala por :"+PosibleHistoria,"ERROR",JOptionPane.ERROR_MESSAGE);
                                txtHistoriaNueva.requestFocus();
                              }
                          }//comprobacion de historia
                       }
                      else{
                          System.out.println("Se modificara una fila de hijo existente");
                         PosibleHistoria=codHistoria;
                         if(codHistoria.equals(PosibleHistoria)){                                                         
                              LlenarTabla();
                         }
                         else{//si es translado
                             System.out.println("Si fuera de translado");  
                           parteHis=codHistoria.split("-");
                           if(!parteHis[0].equals(codCarpeta)){
                              LlenarTabla();
                           }
                           else{
                            JOptionPane.showMessageDialog(this,"La historia es incorrecta para el HIJO(A).\n Corrigala por :"+PosibleHistoria,"ERROR",JOptionPane.ERROR_MESSAGE);
                            txtHistoriaNueva.requestFocus();
                          }
                         }//fin comprobacion historia posible
                      }
                  }
                  else//historia nula
                  {
                      System.out.println("Historia vacia");
                       FilaJefe=a; //indicamos la fila donde esta el jefe
                       LlenarTabla();
                       cantHis++;
                       jcheckBoxJefeCarpeta.setEnabled(false);
                  }   
              }//fin jefe carpeta
              else{//no es jefe carpeta
                  System.out.println("No es jefe de carpeta");
                  if(!codHistoria.isEmpty())
                  {
                      System.out.println("Historia llena"); 
                     if(Directo){//si llena una nueva fila
                         System.out.println("Se ingresa un nuevo hijo a la carpeta"); 
                        PosibleHistoria=codCarpeta+"-"+obtener_letra(cantHis);
                        if(codHistoria.equals(PosibleHistoria)){                                                         
                              LlenarTabla();
                              cantHis++;
                          }
                          else{
                            System.out.println("Si es de translado");
                              parteHis=codHistoria.split("-");
                              if(!parteHis[0].equals(codCarpeta)){
                                  LlenarTabla();
                              }
                              else{
                                JOptionPane.showMessageDialog(this,"La historia es incorrecta para el HIJO(A).\n Corrigala por :"+PosibleHistoria,"ERROR",JOptionPane.ERROR_MESSAGE);
                                txtHistoriaNueva.requestFocus();
                              }
                          }//fin comprobacion historia posible

                      }
                     else//si modifica una fila existente
                     {   
                         System.out.println("Se modificara una fila de hijo existente");
                         PosibleHistoria=codHistoria;
                         if(codHistoria.equals(PosibleHistoria)){                                                         
                              LlenarTabla();
                         }
                         else{//si es translado
                             System.out.println("Si fuera de translado");  
                           parteHis=codHistoria.split("-");
                           if(!parteHis[0].equals(codCarpeta)){
                              LlenarTabla();
                           }
                           else{
                            JOptionPane.showMessageDialog(this,"La historia es incorrecta para el HIJO(A).\n Corrigala por :"+PosibleHistoria,"ERROR",JOptionPane.ERROR_MESSAGE);
                            txtHistoriaNueva.requestFocus();
                          }
                         }//fin comprobacion historia posible

                     }
             }
             else{
                  JOptionPane.showMessageDialog(this,"La HC NUEVA es obligatoria","ERROR",JOptionPane.ERROR_MESSAGE);
                  txtHistoriaNueva.requestFocus();
             }
          }
      }//fin parentesco hijo
      else{
                System.out.println("Para parentesco otros");     
           if(!codHistoria.isEmpty())
           {
               System.out.println("Historia llena");  
               if(Directo){
                   System.out.println("Nueva fila");
                    PosibleHistoria=codCarpeta+"-"+obtener_letra(cantHis);
                    if(codHistoria.equals(PosibleHistoria)){                                                         
                          LlenarTabla();
                          cantHis++;
                   }
                   else{
                        System.out.println("si es translado");
                      parteHis=codHistoria.split("-");
                      if(!parteHis[0].equals(codCarpeta)){
                          LlenarTabla();
                      }
                      else{
                        JOptionPane.showMessageDialog(this,"La historia es incorrecta para OTROS.\n Corrigala por :"+PosibleHistoria,"ERROR",JOptionPane.ERROR_MESSAGE);
                        txtHistoriaNueva.requestFocus();
                      }
                   }//fin comprobacion historia posible

                 }
                 else
                 {   
                     System.out.println("Modificacion fila existente"); 
                    PosibleHistoria=codHistoria;
                    if(codHistoria.equals(PosibleHistoria)){                                                         
                          LlenarTabla();
                    }
                    else{
                        System.out.println("Si es de translado");
                       parteHis=codHistoria.split("-");
                       if(!parteHis[0].equals(codCarpeta)){
                          LlenarTabla();
                       }
                      else{
                        JOptionPane.showMessageDialog(this,"La historia es incorrecta para OTROS.\n Corrigala por :"+PosibleHistoria,"ERROR",JOptionPane.ERROR_MESSAGE);
                        txtHistoriaNueva.requestFocus();
                      }
                     }//fin comprobacion historia posible

                 }
          }
          else{
              JOptionPane.showMessageDialog(this,"La HC NUEVA es obligatoria","ERROR",JOptionPane.ERROR_MESSAGE);
              txtHistoriaNueva.requestFocus();
          }
       }//otros parentescos
      }      
     }
  }
     
    /**
     * Reinicia todos los componentes y las variables 
     * que son utilizadas al momentos de registrar
     * una carpeta familiar
     */
    public void InhabilitarRegistro(){
        jcbParentesco.setSelectedItem("PAPA");
        jcbParentesco.setEnabled(false);
        limpiar();
        txtDireccion.setText("");
        txtDNI.setEnabled(false);
        jcheckBoxJefeCarpeta.setEnabled(false);
//        btnTraslado.setEnabled(false);
        btnAgregar.setEnabled(false);
        btnQuitar.setEnabled(false);
        btnRegistrar.setEnabled(false);
        btnCancelar.setEnabled(false);
        txtHistoriaNueva.setText("");
        txtHistoriaNueva.setEnabled(false);
        txtCodCarpeta.setText("");
        txtCodCarpeta.setEnabled(true);
        txtCodCarpeta.requestFocus();
        modelo = new DefaultTableModel(body,head);
        jtHistoriasClinicas.setModel(modelo);
        FilaJefe=-1;
        RegistroTranslado=new ArrayList();
//        SumillasDeMotivos=new ArrayList<>();
        Directo=true;
        EsRegOTrans=0;
        i=0;
        dad=0;
        mom=0;
        nf=0;
        cantHis=1;
        letraHis=(char) -1;
        codParentesco = (char) -1;
        nf=0; 
    }
    
    /**
     * Verifica si una historia ingresada en la tabla esta repetida
     * @return false si no esta repetida y true en el caso contrario
     */
    public boolean ExisteHistoria(){
        boolean existe=false;
        int a=jtHistoriasClinicas.getRowCount();
        for(int j=0;j<a;j++){
            if(codHistoria.equals(((DefaultTableModel)jtHistoriasClinicas.getModel()).getValueAt(i,9)))
            {
                existe=true;
                JOptionPane.showMessageDialog(this,"Historia ya existe. Corrijala por: \n"+codCarpeta+"-A o "+codCarpeta+"-B","ERROR",JOptionPane.ERROR_MESSAGE);
                break;
            }
        }
        return existe;
    }
    
    /**
     * Verifica si un numero de carpeta existe o no en la base de datos
     * @param codcarpeta numero de la carpeta
     * @throws SQLException 
     */
    public void ExisteCarpeta(String codcarpeta) throws SQLException{
         if(cfc.ExisteCodigo(conn,codcarpeta))
        {
            JOptionPane.showMessageDialog(this,"La carpeta familiar ya existe. Por favor Corrijala","ERROR",JOptionPane.ERROR_MESSAGE);
            txtCodCarpeta.requestFocus();
        }
        else{
            txtCodCarpeta.setEnabled(false);
            txtCodCarpeta.setText(codcarpeta);
            txtHistoriaNueva.requestFocus();
            codCarpeta=codcarpeta;
            BandCarpeta=true;
            HabilitarTodo();
        }
    }
    
    /**
     * Muestra la mayor carpeta almacena hasta el momento
     * en la base de datos
     * @throws SQLException 
     */
    public void maxCarpeta() throws SQLException{
        lbMayorCarpeta.setText(String.valueOf(carf.MayorCarpeta()));
    }
    //utilizado cuando cancela la operacion 
     

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnQuitar;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanelFechNac;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox jcbParentesco;
    private javax.swing.JComboBox jcbSexo;
    private javax.swing.JCheckBox jcheckBoxJefeCarpeta;
    private javax.swing.JPanel jpContenedor;
    private javax.swing.JPanel jpDatosGenerales;
    private javax.swing.JPanel jpFecha;
    private javax.swing.JPanel jpHistoriasClinicas;
    private javax.swing.JTable jtHistoriasClinicas;
    private javax.swing.JLabel lbApeMat;
    private javax.swing.JLabel lbApePat;
    private javax.swing.JLabel lbDNI;
    private javax.swing.JLabel lbDireccion;
    private javax.swing.JLabel lbFechaNacimiento;
    private javax.swing.JLabel lbMayorCarpeta;
    private javax.swing.JLabel lbNCarpeta;
    private javax.swing.JLabel lbNombres;
    private javax.swing.JLabel lbParentesco;
    private javax.swing.JLabel lbSexo;
    private javax.swing.JTextField txtApeMat;
    private javax.swing.JTextField txtApePar;
    private javax.swing.JTextField txtCodCarpeta;
    private javax.swing.JTextField txtDNI;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtHistoriaAnt;
    private javax.swing.JTextField txtHistoriaNueva;
    private javax.swing.JTextField txtNombres;
    // End of variables declaration//GEN-END:variables

    /**
     * Objeto para fecha de nacimiento
     */
    private JDatePickerImpl fa = new JDatePickerImpl(new JDatePanelImpl
        (new UtilDateModel(new Date())));    
    /**
     * Variable global sexo
     */
    private char sexo = (char) -1;
    /**
     * Variable global parentesco
     */
    private String parentesco = "";    
    /**
     * Variable global abecedario
     */
    private char[] abecedario = new char [27];        
    /**
     * jf = jefe familia
     */
    private boolean jf = false;
    /**
     * Papa
     */
    private int dad = 0;
    /**
     * Mama
     */
    private int mom = 0;
    /**
     * Fila seleccionada
     */
    private int nf = 0;
    /**
     * Cantidad de historias
     */
    private int cantHis = 1;
    /**
     * Código de historia
     */
    private int codHis = -1;    
    /**
     * Letra de historia
     */
    private char letraHis = (char) -1;
    /**
     * Objeto Pacient
     */
    private Paciente p;
    /**
     * Objeto CarpetaFamiliar
     */
    private CarpetaFamiliar cf;
    /**
     * Objeto HistoriaClinica
     */
    private HistoriaClinica hc;
    /**
     * Objeto Parentesco
     */
    private Parentesco pa;
    /**
     * Variable global dni
     */
    private String dni = "";
    /**
     * Variable global apellido paterno
     */
    private String appat = "";
    /**
     * Variable global apellido materno
     */
    private String apmat = "";
    /**
     * Variable global nombre
     */
    private String nombre = "";
    /**
     * Variable global direccion
     */
    private String direccion = "";
    /**
     * Variable global fecha de nacimiento
     */
    private String fechNac = "";
    /**
     * Variable global código de carpeta
     */
    public String codCarpeta = "";
    /**
     * Variable global código de parentesco
     */
    private char codParentesco = (char) -1;
    /**
     * Variable global código de historia
     */
    private String codHistoria = "";
    /**
     * Variable global historia antigua
     */
    private String HistAnt="";
    /**
     * Variable global posible historia
     */
    private String PosibleHistoria;
    
}
