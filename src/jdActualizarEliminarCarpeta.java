/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */



import java.sql.Connection;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author carlos
 */
public class jdActualizarEliminarCarpeta extends javax.swing.JDialog {

    /**
     * Variable tipo integer que sirve para saber que acción
     * se realizará Actualizar/Eliminar
     */
    int deDonde = -1;
    /**
     * Variable tipo string que contiene el título de acuerdo
     * a la acción a realizarse Actualizar/Eliminar
     */
    String titulo = ""; 
    /**
     * Variable tipo boolean que nos permitira saber si el
     * código de historia proviene de un traslado
     */
    private boolean esTras = false;
    /**
     * Objeto del formulario del Usuario Normal
     */
    frmPrincipal parent;
    /**
     * Objeto de la CarpetaFamiliarControl
     */
    CarpetaFamiliarControl cfc;
    /**
     * Obejto de la Clase Conexion
     */
    Conexion con;
    /**
     * Obtiene la conexion
     */
    Connection conn; 
    
    /**
     * Creates new form jdActualizarNroCarpeta2
     */
    
    /**
     * Creates new form jdActualizarNroCarpeta
     */
    public jdActualizarEliminarCarpeta(frmPrincipal parent, boolean modal, int op) {
        super(parent, modal);
        initComponents();
//        con=new Conexion();
//        conn=con.getConnection(); 
//        deDonde = op;        
//        cfc=new CarpetaFamiliarControl();
//        this.parent=parent;
//        //actualizar
//        if(op==1){
//            titulo = "Actualizar";            
//            Configuraciones();
//            mostrarObjetos();
//        }else if(op==2){
//            titulo = "Eliminar";
//            Configuraciones();
//            ocultarObjetos();
//        }        
    }//fin Constructor
//
//    /**
//     * Contiene las configuraciones generales del jDialog
//     */
//    public void Configuraciones(){
//        this.setTitle(titulo+" Carpeta Familiar");
//        this.setLocationRelativeTo(null);
//        jpContenedor.setBorder(new ImagenMDI());
//        btnAccion.setText(titulo);
//        txtCarpeta.requestFocus();
//    }//fin Configuraciones
//    
//    /**
//     * This method is called from within the constructor to initialize the form.
//     * WARNING: Do NOT modify this code. The content of this method is always
//     * regenerated by the Form Editor.
//     */
//    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpContenedor = new javax.swing.JPanel();
        btnAccion = new javax.swing.JButton();
        txtCarpetaNueva = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabelNuevoNro = new javax.swing.JLabel();
        txtCarpeta = new javax.swing.JTextField();
        btnSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        btnAccion.setText("Accion");
        btnAccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAccionActionPerformed(evt);
            }
        });

        txtCarpetaNueva.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCarpetaNuevaKeyTyped(evt);
            }
        });

        jLabel1.setText("Nro. Carpeta:");

        jLabelNuevoNro.setText("Nuevo Nro. Carpeta:");

        txtCarpeta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCarpetaKeyTyped(evt);
            }
        });

        btnSalir.setBackground(new java.awt.Color(255, 255, 153));
        btnSalir.setForeground(new java.awt.Color(0, 0, 255));
        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/exit - boton.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpContenedorLayout = new javax.swing.GroupLayout(jpContenedor);
        jpContenedor.setLayout(jpContenedorLayout);
        jpContenedorLayout.setHorizontalGroup(
            jpContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpContenedorLayout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(jpContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelNuevoNro)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jpContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpContenedorLayout.createSequentialGroup()
                        .addComponent(txtCarpetaNueva, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpContenedorLayout.createSequentialGroup()
                        .addComponent(txtCarpeta, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAccion, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(110, Short.MAX_VALUE))
        );
        jpContenedorLayout.setVerticalGroup(
            jpContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpContenedorLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jpContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtCarpeta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAccion, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jpContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpContenedorLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jpContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelNuevoNro)
                            .addComponent(txtCarpetaNueva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jpContenedorLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSalir)))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpContenedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpContenedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Realiza la acción de actualizar o eliminar
     * Carpeta Familiar
     * @param evt Evento asociado al botón Acción
     */
    private void btnAccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAccionActionPerformed
//        if(deDonde==1){
//            try {
//                actualizarNroCarpeta(txtCarpeta.getText(),txtCarpetaNueva.getText());                
//            } catch (SQLException ex) {
//                Logger.getLogger(jdActualizarEliminarCarpeta.class.getName()).log(Level.SEVERE, null, ex);
//                 JOptionPane.showMessageDialog(this, "Verifique que los datos sean correctos",
//                    "ERROR",JOptionPane.ERROR_MESSAGE);
//                 limpiarCajas();
//            }
//        }else if(deDonde==2){
//            try {
//                eliminarCarpetaFamiliar(txtCarpeta.getText());
//            } catch (SQLException ex) {
//                Logger.getLogger(jdActualizarEliminarCarpeta.class.getName()).log(Level.SEVERE, null, ex);
//                JOptionPane.showMessageDialog(this, "Verifique que los datos sean correctos",
//                    "ERROR",JOptionPane.ERROR_MESSAGE);
//                 limpiarCajas();
//            }
//        }
    }//GEN-LAST:event_btnAccionActionPerformed

    /**
     * Se verifica que la Carpeta Familiar ingresada
     * sea del tipo correcto
     * @param evt Evento asociado a la caja de texto
     */
    private void txtCarpetaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCarpetaKeyTyped
        //cfc.ValidarCarpetaFamiliar(txtCarpeta, evt);
    }//GEN-LAST:event_txtCarpetaKeyTyped

    /**
     * Se verifica que la nueva Carpeta Familiar ingresada
     * sea del tipo correcto
     * @param evt Evento asociado a la caja de texto
     */
    private void txtCarpetaNuevaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCarpetaNuevaKeyTyped
        //cfc.ValidarCarpetaFamiliar(txtCarpetaNueva, evt);
    }//GEN-LAST:event_txtCarpetaNuevaKeyTyped

    /**
     * Salimos de la ventana de Actualizar/Eliminar Carpeta Familiar
     * y regresamos al Menú Principal
     * @param evt Evento asociado al botón Salir
     */
    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
//        try {
//            if(deDonde==2)
//                parent.EscribeCantidades();
//        } catch (SQLException ex) {
//            Logger.getLogger(jdRegistrarCarpetaFamiliar.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    /**
     * Evita que se termine todo el programa
     * @param evt Evento
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
//        try {
//            if(deDonde==2)
//                parent.EscribeCantidades();
//        } catch (SQLException ex) {
//            Logger.getLogger(jdRegistrarCarpetaFamiliar.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        dispose();
    }//GEN-LAST:event_formWindowClosing
    
    /**
     * Limpia las cajas de textos
     */
//    private void limpiarCajas(){
//        if(deDonde==1){
//            txtCarpeta.setText("");
//            txtCarpetaNueva.setText("");
//        }
//        if(deDonde==2){
//            txtCarpeta.setText("");
//        }
//    }
//    
//    /**
//     * Eliminar una Carpeta Familiar
//     * @param codCarpeta Código de Carpeta
//     * @throws SQLException Error SQL
//     */
//    private void eliminarCarpetaFamiliar(String codCarpeta) throws SQLException{
//        CarpetaFamiliar carpetafamiliar,cf,c;
//        HistoriaClinica hc,h;
//        Paciente paciente,p;
//        
//        //Variables
//        int tam;
//        int referencia=-1;
//        
//        p = new Paciente();
//        h = new HistoriaClinica();
//        c = new CarpetaFamiliar(codCarpeta);
//        
//        carpetafamiliar=new CarpetaFamiliar();
//        cf=carpetafamiliar.ConsultarCarpetaFamiliar(codCarpeta);//devuelve un objeto carpeta familiar con todas las historias que le corresponden
//        
//        tam=cf.getHistorias().size();
//        
//        if(!codCarpeta.isEmpty()){
//            if(cfc.ExisteCodigo(conn,codCarpeta)){//existe carpeta?
//                if(tam==0){//no hay historias clínicas
//                    c.eliminarCarpeta(conn);
//                    JOptionPane.showMessageDialog(this, "No hay historias en esta carpeta...Se eliminó con éxito!",
//                        "INFORMACION",JOptionPane.INFORMATION_MESSAGE);
//                    limpiarCajas();
//                    txtCarpeta.requestFocus();
//                }else{//si hay historias clinicas      
//                    for(int i=0;i<tam;i++){//obtenemos un arraylist de historias clinicas
//                        hc=cf.getHistorias().get(i);
//                        paciente=hc.getDuenno();//obtenemos el paciente con la historia clinica obtenida 
//                        referencia = paciente.getReferencia();                       
//                        System.out.println("Referencia: "+paciente.getReferencia());                
//                        h.eliminarHistoriaClinica(conn, referencia);
//                        p.eliminarPaciente(conn, referencia);
//                    }//fin arraylist de historias clinicas
//                    c.eliminarCarpeta(conn);
//                    JOptionPane.showMessageDialog(this, "Eliminación existosa.",
//                        "INFORMACION",JOptionPane.INFORMATION_MESSAGE);
//                    limpiarCajas();
//                }//fin si hay historias clinicas
//            }else{//no existe carpeta
//                JOptionPane.showMessageDialog(this, "Carpeta no existe!...Ingrese otra!",
//                    "ERROR",JOptionPane.ERROR_MESSAGE);
//                txtCarpeta.requestFocus();  
//                limpiarCajas();
//            }//fin no existe carpeta 
//        }else{
//            JOptionPane.showMessageDialog(this, "Ingrese el Cod. Carpeta",
//                "ERROR",JOptionPane.ERROR_MESSAGE);
//            txtCarpeta.requestFocus();
//        }      
//    }//fin eliminarCarpetaFamiliar
//        
//    /**
//     * Actualizar el número de Carpeta Familiar     * 
//     * @param codCarpeta Carpeta Familiar Antiguia
//     * @param ncod Carpeta Familiar Nueva
//     * @throws SQLException Error SQL
//     */
//    private void actualizarNroCarpeta(String codCarpeta, String ncod) throws SQLException{//nos trae todos los integrantes de la carpeta
//        System.out.println("Cod. Carpeta: "+codCarpeta);
//        
//        //Objetos
//        //cfn=carpeta familiar nueva, 
//        //cfe=carpeta familiar a eliminar
//        //cfc=carpeta familiar consulta
//        CarpetaFamiliar carpetafamiliar,cf,cfn,cfe;//,cfc;
//        HistoriaClinica hc;
//        Paciente paciente,p;
//        
//        //Variables
//        int tam;
//        String codHistoria="";
//        int referencia=-1;
//        
//        p = new Paciente();
//        carpetafamiliar=new CarpetaFamiliar();
//        cf=carpetafamiliar.ConsultarCarpetaFamiliar(codCarpeta);//devuelve un objeto carpeta familiar con todas las historias que le corresponden
//        
//        tam=cf.getHistorias().size();
//        if(!codCarpeta.isEmpty()){//codigo carpeta no vacia            
//            if(cfc.ExisteCodigo(conn, codCarpeta)){//codigo carpeta existe
//                if(!ncod.isEmpty()){//nuevo codigo carpeta no vacio
//                    if(cfc.ExisteCodigo(conn,ncod)){//nuevo codigo carpeta no disponible
//                        JOptionPane.showMessageDialog(this,"Nuevo código de carpeta familiar ya existe!..."
//                                + "Ingrese otra!","ERROR",JOptionPane.ERROR_MESSAGE);
//                        txtCarpetaNueva.requestFocus();
//                        txtCarpetaNueva.setText("");
//                    }else{//nuevo codigo carpeta disponible
//                        if(tam==0){//no hay historias clinicas
//                            cfe = new CarpetaFamiliar(codCarpeta);
//                            cfe.actualizarNroCarpeta(conn, ncod);
//                            JOptionPane.showMessageDialog(this, "No hay historias en esta carpeta..."
//                                    + "Actualizacion existosa!",
//                                "INFORMACION",JOptionPane.INFORMATION_MESSAGE); 
//                            limpiarCajas();
//                        }else{//si hay historias clinicas en la carpeta 
//                            cfn = new CarpetaFamiliar(ncod);
//                            cfn.registrarCarpeta(conn);
//                            //actualizo las historias
//                            for(int i=0;i<tam;i++){//obtenemos un arraylist de historias clinicas
//                                hc=cf.getHistorias().get(i);
//                                paciente=hc.getDuenno();//obtenemos el paciente con la historia clinica obtenida 
//                                referencia = paciente.getReferencia();                    
//                                if(paciente.isJefeFamilia()){//verificamos si es jefe de familia
//                                    System.out.println("---Historia del Jefe---");
//                                    codHistoria = hc.getHc();//obtengo la historia
//                                    String[] split2 = codHistoria.split("-");                                 
//                                    esTras = isTraslate(codCarpeta, codHistoria, split2[0]);
//                                    if(esTras == true){
//                                        System.out.println("Cod. Hist. Ant.:"+codHistoria);
//                                        System.out.println("Referencia (JEFE): "+referencia);
//                                        p.actualizarJefeCarpetaTras(conn, ncod, referencia);
//                                    }else{                                    
//                                        System.out.println("Cod. Hist. Ant.:"+codHistoria);
//                                        codHistoria = ncod+"-"+split2[1];//nueva historia
//                                        System.out.println("Cod. Hist. Nuev.:"+codHistoria);
//                                        System.out.println("Referencia (JEFE): "+referencia);
//                                        p.actualizarJefeCarpeta(conn, ncod, codHistoria, referencia);
//                                    }                                                   
//                                }else{//fin de si es jefe familia
//                                    System.out.println("---Historia del No Jefe---");
//                                    codHistoria = hc.getHc();//obtengo la historia
//                                    String[] split2 = codHistoria.split("-"); 
//                                    esTras = isTraslate(codCarpeta, codHistoria, split2[0]);
//                                    if(esTras==true){
//                                        p.actualizarNoJefeCarpetaTras(conn, ncod, referencia); 
//                                    }else{
//                                        System.out.println("Cod. Hist. Ant.:"+codHistoria);
//                                        codHistoria = ncod+"-"+split2[1];//nueva historia
//                                        System.out.println("Cod. Hist. Nuev.:"+codHistoria);                        
//                                        System.out.println("Referencia: "+referencia);                                    
//                                        p.actualizarNoJefeCarpeta(conn, ncod, codHistoria, referencia);
//                                    }
//                                }//actualiza no jefe
//                            }//fin arraylist de historias clinicas
//                            //elimino carpeta antigua
//                            cfe = new CarpetaFamiliar(codCarpeta);
//                            cfe.eliminarCarpeta(conn);
//                            JOptionPane.showMessageDialog(this, "Actualización de Nro. Carpeta existoso",
//                                "INFORMACION",JOptionPane.INFORMATION_MESSAGE);
//                            limpiarCajas();                  
//                        }//fin si hay historias clinicas en la carpeta 
//                    }//fin nuevo codigo carpeta disponible                    
//                }else{//nuevo codigo carpeta vacio
//                    JOptionPane.showMessageDialog(this, "Ingrese el nuevo Cod. Carpeta",
//                            "ERROR",JOptionPane.ERROR_MESSAGE);
//                    txtCarpetaNueva.requestFocus();
//                }//fin nuevo codigo carpeta vacio 
//            }else{//no existe codCarpeta antiguo
//                JOptionPane.showMessageDialog(this, "Cod. Carpeta no existe!...Ingrese otra",
//                        "ERROR",JOptionPane.ERROR_MESSAGE);
//                 txtCarpeta.requestFocus();
//                 txtCarpeta.setText("");
//            }            
//        }else{//cod carpeta vacia
//            JOptionPane.showMessageDialog(this, "Ingrese el Cod. Carpeta",
//                    "ERROR",JOptionPane.ERROR_MESSAGE);
//            txtCarpeta.requestFocus();
//        }        
//    }//fin actualizarNroCarpeta
//    
//    /**
//     * Verifica si el código de historia pertence de un traslado
//     * @param cc Código de Carpeta
//     * @param ch Código de Historia
//     * @param icod Inicio del Código de Historia
//     * @return Devuelve true si es traslado y false si no lo es
//     */
//    private boolean isTraslate(String cc,String ch, String icod){
//        boolean rpta=false;
//        if(ch.isEmpty()){
//            rpta = false;
//        }else{
//            if(!cc.equals(icod)){
//                rpta = true;                
//            }else{ 
//                rpta = false;
//            }
//        }
//        return rpta;
//    }//fin isTraslate
//    
//    /**
//     * Muestra los objetos etiqueta y caja de texto
//     * para el nuevo código de carpeta
//     */
//    private void mostrarObjetos(){
//        jLabelNuevoNro.setVisible(true);
//        txtCarpetaNueva.setVisible(true);
//    }
//    
//    /**
//     * Oculta los objetos etiqueta y caja de texto
//     * para el nuevo código de carpeta
//     */
//    private void ocultarObjetos(){
//        jLabelNuevoNro.setVisible(false);
//        txtCarpetaNueva.setVisible(false);
//    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccion;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelNuevoNro;
    private javax.swing.JPanel jpContenedor;
    private javax.swing.JTextField txtCarpeta;
    private javax.swing.JTextField txtCarpetaNueva;
    // End of variables declaration//GEN-END:variables

}
